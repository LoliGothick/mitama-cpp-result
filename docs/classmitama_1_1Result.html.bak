<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>My Project: mitama::Result&lt; T, E &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">My Project
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>mitama</b></li><li class="navelem"><a class="el" href="classmitama_1_1Result.html">Result</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classmitama_1_1Result-members.html">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">mitama::Result&lt; T, E &gt; Class Template Reference<div class="ingroups"><a class="el" href="group__Modules.html">Mitama.Result modules</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>data <a class="el" href="classmitama_1_1Result.html" title="data Result = Ok | Err">Result</a> = <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> | <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>  
 <a href="classmitama_1_1Result.html#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Result_8hpp_source.html">Result.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a9199dd0837f4ec69d51ddf26cc5a0c45"><td class="memItemLeft" align="right" valign="top"><a id="a9199dd0837f4ec69d51ddf26cc5a0c45"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a9199dd0837f4ec69d51ddf26cc5a0c45">ok_type</a> = T</td></tr>
<tr class="memdesc:a9199dd0837f4ec69d51ddf26cc5a0c45"><td class="mdescLeft">&#160;</td><td class="mdescRight">dependent type <br /></td></tr>
<tr class="separator:a9199dd0837f4ec69d51ddf26cc5a0c45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a89c986e309f6ab5f15872e8bfc91f8"><td class="memItemLeft" align="right" valign="top"><a id="a8a89c986e309f6ab5f15872e8bfc91f8"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a8a89c986e309f6ab5f15872e8bfc91f8">err_type</a> = E</td></tr>
<tr class="memdesc:a8a89c986e309f6ab5f15872e8bfc91f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">dependent type <br /></td></tr>
<tr class="separator:a8a89c986e309f6ab5f15872e8bfc91f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a276134207694d2ef1f51ae19880f43a2"><td class="memItemLeft" align="right" valign="top"><a id="a276134207694d2ef1f51ae19880f43a2"></a>
constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a276134207694d2ef1f51ae19880f43a2">Result</a> () noexcept=delete</td></tr>
<tr class="memdesc:a276134207694d2ef1f51ae19880f43a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor. This constructor is explicitly deleted. Empty <a class="el" href="classmitama_1_1Result.html" title="data Result = Ok | Err">Result</a> is not allowed. <br /></td></tr>
<tr class="separator:a276134207694d2ef1f51ae19880f43a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05687844a368c5bd7ba81f9f35bd847d"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a05687844a368c5bd7ba81f9f35bd847d">Result</a> (const <a class="el" href="classmitama_1_1Result.html">Result</a> &amp;rhs)</td></tr>
<tr class="memdesc:a05687844a368c5bd7ba81f9f35bd847d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  Initializes the contained variant as if direct-non-list-initializing an object of type T with the expression *rhs.  <a href="#a05687844a368c5bd7ba81f9f35bd847d">More...</a><br /></td></tr>
<tr class="separator:a05687844a368c5bd7ba81f9f35bd847d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e82030db468393511785af566c99066"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a6e82030db468393511785af566c99066">Result</a> (<a class="el" href="classmitama_1_1Result.html">Result</a> &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a6e82030db468393511785af566c99066"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructor.  Initializes the contained variant as if direct-non-list-initializing an object of type T with the expression std::move(*rhs). rhs is unchanged.  <a href="#a6e82030db468393511785af566c99066">More...</a><br /></td></tr>
<tr class="separator:a6e82030db468393511785af566c99066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbe8630f4bcb322e5483a45b41fb7be1"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:adbe8630f4bcb322e5483a45b41fb7be1"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#adbe8630f4bcb322e5483a45b41fb7be1">Result</a> (<a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; const &amp;<a class="el" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>)</td></tr>
<tr class="memdesc:adbe8630f4bcb322e5483a45b41fb7be1"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> const&amp;  <a href="#adbe8630f4bcb322e5483a45b41fb7be1">More...</a><br /></td></tr>
<tr class="separator:adbe8630f4bcb322e5483a45b41fb7be1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbe8630f4bcb322e5483a45b41fb7be1"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:adbe8630f4bcb322e5483a45b41fb7be1"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#adbe8630f4bcb322e5483a45b41fb7be1">Result</a> (<a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; const &amp;<a class="el" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>)</td></tr>
<tr class="memdesc:adbe8630f4bcb322e5483a45b41fb7be1"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> const&amp;  <a href="#adbe8630f4bcb322e5483a45b41fb7be1">More...</a><br /></td></tr>
<tr class="separator:adbe8630f4bcb322e5483a45b41fb7be1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5136126583dff49a654afb1ed0fba05"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:ac5136126583dff49a654afb1ed0fba05"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#ac5136126583dff49a654afb1ed0fba05">Result</a> (<a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; &amp;&amp;<a class="el" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>)</td></tr>
<tr class="memdesc:ac5136126583dff49a654afb1ed0fba05"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>&amp;&amp;  <a href="#ac5136126583dff49a654afb1ed0fba05">More...</a><br /></td></tr>
<tr class="separator:ac5136126583dff49a654afb1ed0fba05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5136126583dff49a654afb1ed0fba05"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:ac5136126583dff49a654afb1ed0fba05"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#ac5136126583dff49a654afb1ed0fba05">Result</a> (<a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; &amp;&amp;<a class="el" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>)</td></tr>
<tr class="memdesc:ac5136126583dff49a654afb1ed0fba05"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>&amp;&amp;  <a href="#ac5136126583dff49a654afb1ed0fba05">More...</a><br /></td></tr>
<tr class="separator:ac5136126583dff49a654afb1ed0fba05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1e47c8aba033a76f0f5683bd97efc6f"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:ac1e47c8aba033a76f0f5683bd97efc6f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#ac1e47c8aba033a76f0f5683bd97efc6f">Result</a> (<a class="el" href="classmitama_1_1Err.html">Err</a>&lt; U &gt; const &amp;<a class="el" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>)</td></tr>
<tr class="memdesc:ac1e47c8aba033a76f0f5683bd97efc6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> const&amp;  <a href="#ac1e47c8aba033a76f0f5683bd97efc6f">More...</a><br /></td></tr>
<tr class="separator:ac1e47c8aba033a76f0f5683bd97efc6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1e47c8aba033a76f0f5683bd97efc6f"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:ac1e47c8aba033a76f0f5683bd97efc6f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#ac1e47c8aba033a76f0f5683bd97efc6f">Result</a> (<a class="el" href="classmitama_1_1Err.html">Err</a>&lt; U &gt; const &amp;<a class="el" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>)</td></tr>
<tr class="memdesc:ac1e47c8aba033a76f0f5683bd97efc6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> const&amp;  <a href="#ac1e47c8aba033a76f0f5683bd97efc6f">More...</a><br /></td></tr>
<tr class="separator:ac1e47c8aba033a76f0f5683bd97efc6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acabba586680d639eaa37cfa334a6d08b"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:acabba586680d639eaa37cfa334a6d08b"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#acabba586680d639eaa37cfa334a6d08b">Result</a> (<a class="el" href="classmitama_1_1Err.html">Err</a>&lt; U &gt; &amp;&amp;<a class="el" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>)</td></tr>
<tr class="memdesc:acabba586680d639eaa37cfa334a6d08b"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>&amp;&amp;  <a href="#acabba586680d639eaa37cfa334a6d08b">More...</a><br /></td></tr>
<tr class="separator:acabba586680d639eaa37cfa334a6d08b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acabba586680d639eaa37cfa334a6d08b"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:acabba586680d639eaa37cfa334a6d08b"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#acabba586680d639eaa37cfa334a6d08b">Result</a> (<a class="el" href="classmitama_1_1Err.html">Err</a>&lt; U &gt; &amp;&amp;<a class="el" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>)</td></tr>
<tr class="memdesc:acabba586680d639eaa37cfa334a6d08b"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>&amp;&amp;  <a href="#acabba586680d639eaa37cfa334a6d08b">More...</a><br /></td></tr>
<tr class="separator:acabba586680d639eaa37cfa334a6d08b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab505b0fdee11fdda752f6739825d0ee1"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:ab505b0fdee11fdda752f6739825d0ee1"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#ab505b0fdee11fdda752f6739825d0ee1">Result</a> (<a class="el" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a>, Args &amp;&amp;... args)</td></tr>
<tr class="memdesc:ab505b0fdee11fdda752f6739825d0ee1"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for ok value  <a href="#ab505b0fdee11fdda752f6739825d0ee1">More...</a><br /></td></tr>
<tr class="separator:ab505b0fdee11fdda752f6739825d0ee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ba3d8d21bac96693800a7b8a744f040"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a9ba3d8d21bac96693800a7b8a744f040"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a9ba3d8d21bac96693800a7b8a744f040">Result</a> (<a class="el" href="classmitama_1_1in__place__err__t.html">in_place_err_t</a>, Args &amp;&amp;... args)</td></tr>
<tr class="memdesc:a9ba3d8d21bac96693800a7b8a744f040"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for ok value  <a href="#a9ba3d8d21bac96693800a7b8a744f040">More...</a><br /></td></tr>
<tr class="separator:a9ba3d8d21bac96693800a7b8a744f040"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c5b714a99a8998f0182a84cd0c03d17"><td class="memTemplParams" colspan="2">template&lt;class U , class... Args&gt; </td></tr>
<tr class="memitem:a5c5b714a99a8998f0182a84cd0c03d17"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a5c5b714a99a8998f0182a84cd0c03d17">Result</a> (<a class="el" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a>, std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</td></tr>
<tr class="memdesc:a5c5b714a99a8998f0182a84cd0c03d17"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for ok value  <a href="#a5c5b714a99a8998f0182a84cd0c03d17">More...</a><br /></td></tr>
<tr class="separator:a5c5b714a99a8998f0182a84cd0c03d17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c5b714a99a8998f0182a84cd0c03d17"><td class="memTemplParams" colspan="2">template&lt;class U , class... Args&gt; </td></tr>
<tr class="memitem:a5c5b714a99a8998f0182a84cd0c03d17"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a5c5b714a99a8998f0182a84cd0c03d17">Result</a> (<a class="el" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a>, std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</td></tr>
<tr class="memdesc:a5c5b714a99a8998f0182a84cd0c03d17"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for err value  <a href="#a5c5b714a99a8998f0182a84cd0c03d17">More...</a><br /></td></tr>
<tr class="separator:a5c5b714a99a8998f0182a84cd0c03d17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeab33770153c67c98a2db599aff74896"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a> () const noexcept</td></tr>
<tr class="memdesc:aeab33770153c67c98a2db599aff74896"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the result is <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>.  <a href="#aeab33770153c67c98a2db599aff74896">More...</a><br /></td></tr>
<tr class="separator:aeab33770153c67c98a2db599aff74896"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5918499b796baa86637089606fd41212"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">is_err</a> () const noexcept</td></tr>
<tr class="memdesc:a5918499b796baa86637089606fd41212"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the result is <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>.  <a href="#a5918499b796baa86637089606fd41212">More...</a><br /></td></tr>
<tr class="separator:a5918499b796baa86637089606fd41212"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59edaa99e2fc00599a2f76433b399a6f"><td class="memItemLeft" align="right" valign="top">constexpr std::optional&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a> () const &amp;</td></tr>
<tr class="memdesc:a59edaa99e2fc00599a2f76433b399a6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from Result&lt;T, E&gt; to std::optional&lt;T&gt;.  <a href="#a59edaa99e2fc00599a2f76433b399a6f">More...</a><br /></td></tr>
<tr class="separator:a59edaa99e2fc00599a2f76433b399a6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39154f3c115ff133e2750f115a911c4b"><td class="memItemLeft" align="right" valign="top">constexpr std::optional&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a39154f3c115ff133e2750f115a911c4b">ok</a> () &amp;&amp;</td></tr>
<tr class="memdesc:a39154f3c115ff133e2750f115a911c4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from Result&lt;T, E&gt; to std::optional&lt;T&gt;.  <a href="#a39154f3c115ff133e2750f115a911c4b">More...</a><br /></td></tr>
<tr class="separator:a39154f3c115ff133e2750f115a911c4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b8010b01f6dc19ec147d68b3aba7f5b"><td class="memItemLeft" align="right" valign="top">constexpr std::optional&lt; E &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a> () const &amp;</td></tr>
<tr class="memdesc:a7b8010b01f6dc19ec147d68b3aba7f5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from Result&lt;T, E&gt; to std::optional&lt;E&gt;.  <a href="#a7b8010b01f6dc19ec147d68b3aba7f5b">More...</a><br /></td></tr>
<tr class="separator:a7b8010b01f6dc19ec147d68b3aba7f5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c9d99621b6a1fd42ca8225051c7eefc"><td class="memItemLeft" align="right" valign="top">constexpr std::optional&lt; E &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a9c9d99621b6a1fd42ca8225051c7eefc">err</a> () &amp;&amp;</td></tr>
<tr class="memdesc:a9c9d99621b6a1fd42ca8225051c7eefc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts from Result&lt;T, E&gt; to std::optional&lt;E&gt;.  <a href="#a9c9d99621b6a1fd42ca8225051c7eefc">More...</a><br /></td></tr>
<tr class="separator:a9c9d99621b6a1fd42ca8225051c7eefc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73ec80af11f3a45db1c17135e23bf91c"><td class="memTemplParams" colspan="2">template&lt;class O &gt; </td></tr>
<tr class="memitem:a73ec80af11f3a45db1c17135e23bf91c"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a73ec80af11f3a45db1c17135e23bf91c">map</a> (O &amp;&amp;op) const &amp;-&gt; std::enable_if_t&lt; std::is_invocable_v&lt; O, T &gt;, <a class="el" href="classmitama_1_1Result.html">Result</a>&lt; std::invoke_result_t&lt; O, T &gt;, E &gt;&gt;</td></tr>
<tr class="memdesc:a73ec80af11f3a45db1c17135e23bf91c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maps a Result&lt;T, E&gt; to Result&lt;U, E&gt; by applying a function to a contained <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> value, leaving an <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> value untouched.  <a href="#a73ec80af11f3a45db1c17135e23bf91c">More...</a><br /></td></tr>
<tr class="separator:a73ec80af11f3a45db1c17135e23bf91c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadac8922b5477d0b2dfaaf33f7a498b8"><td class="memTemplParams" colspan="2"><a id="aadac8922b5477d0b2dfaaf33f7a498b8"></a>
template&lt;class O &gt; </td></tr>
<tr class="memitem:aadac8922b5477d0b2dfaaf33f7a498b8"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><b>map</b> (O &amp;&amp;op) &amp;&amp;-&gt; std::enable_if_t&lt; std::is_invocable_v&lt; O, T &gt;, <a class="el" href="classmitama_1_1Result.html">Result</a>&lt; std::invoke_result_t&lt; O, T &gt;, E &gt;&gt;</td></tr>
<tr class="separator:aadac8922b5477d0b2dfaaf33f7a498b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fdd7a4b731485784fc734994cbcf700"><td class="memTemplParams" colspan="2">template&lt;class O &gt; </td></tr>
<tr class="memitem:a9fdd7a4b731485784fc734994cbcf700"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a9fdd7a4b731485784fc734994cbcf700">map_err</a> (O &amp;&amp;op) const &amp;-&gt; std::enable_if_t&lt; std::is_invocable_v&lt; O, E &gt;, <a class="el" href="classmitama_1_1Result.html">Result</a>&lt; T, std::invoke_result_t&lt; O, E &gt;&gt;&gt;</td></tr>
<tr class="memdesc:a9fdd7a4b731485784fc734994cbcf700"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maps a Result&lt;T, E&gt; to Result&lt;T, F&gt; by applying a function to a contained <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> value, leaving an <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> value untouched.  <a href="#a9fdd7a4b731485784fc734994cbcf700">More...</a><br /></td></tr>
<tr class="separator:a9fdd7a4b731485784fc734994cbcf700"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f85fd2bcd4fbd6940bee8af809f6430"><td class="memTemplParams" colspan="2"><a id="a8f85fd2bcd4fbd6940bee8af809f6430"></a>
template&lt;class O &gt; </td></tr>
<tr class="memitem:a8f85fd2bcd4fbd6940bee8af809f6430"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><b>map_err</b> (O &amp;&amp;op) &amp;&amp;-&gt; std::enable_if_t&lt; std::is_invocable_v&lt; O, E &gt;, <a class="el" href="classmitama_1_1Result.html">Result</a>&lt; T, std::invoke_result_t&lt; O, E &gt;&gt;&gt;</td></tr>
<tr class="separator:a8f85fd2bcd4fbd6940bee8af809f6430"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2f98b94748ee8e7577d5fe12a64a7b2"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:ae2f98b94748ee8e7577d5fe12a64a7b2"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#ae2f98b94748ee8e7577d5fe12a64a7b2">operator &amp;&amp;</a> (<a class="el" href="classmitama_1_1Result.html">Result</a>&lt; U, E &gt; const &amp;res) const &amp;-&gt; <a class="el" href="classmitama_1_1Result.html">Result</a>&lt; U, E &gt;</td></tr>
<tr class="memdesc:ae2f98b94748ee8e7577d5fe12a64a7b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns res if the result is <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>, otherwise returns the <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> value of self.  <a href="#ae2f98b94748ee8e7577d5fe12a64a7b2">More...</a><br /></td></tr>
<tr class="separator:ae2f98b94748ee8e7577d5fe12a64a7b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cfdb95916e61eb1b820313990d91e8d"><td class="memTemplParams" colspan="2">template&lt;class O &gt; </td></tr>
<tr class="memitem:a6cfdb95916e61eb1b820313990d91e8d"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a> (O &amp;&amp;op) const &amp;-&gt; std::enable_if_t&lt; is_result_v&lt; std::invoke_result_t&lt; O, T &gt;&gt;, std::invoke_result_t&lt; O, T &gt;&gt;</td></tr>
<tr class="memdesc:a6cfdb95916e61eb1b820313990d91e8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls op if the result is <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>, otherwise returns the <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> value of self.  <a href="#a6cfdb95916e61eb1b820313990d91e8d">More...</a><br /></td></tr>
<tr class="separator:a6cfdb95916e61eb1b820313990d91e8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6be2777da2b9c3ea986b09cc69b4af6c"><td class="memTemplParams" colspan="2"><a id="a6be2777da2b9c3ea986b09cc69b4af6c"></a>
template&lt;class O &gt; </td></tr>
<tr class="memitem:a6be2777da2b9c3ea986b09cc69b4af6c"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><b>and_then</b> (O &amp;&amp;op) &amp;&amp;-&gt; std::enable_if_t&lt; is_result_v&lt; std::invoke_result_t&lt; O, T &gt;&gt;, std::invoke_result_t&lt; O, T &gt;&gt;</td></tr>
<tr class="separator:a6be2777da2b9c3ea986b09cc69b4af6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f14132897491554f7996a89e9d2c779"><td class="memTemplParams" colspan="2">template&lt;class F &gt; </td></tr>
<tr class="memitem:a1f14132897491554f7996a89e9d2c779"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a1f14132897491554f7996a89e9d2c779">operator||</a> (<a class="el" href="classmitama_1_1Result.html">Result</a>&lt; T, F &gt; const &amp;res) const &amp;-&gt; <a class="el" href="classmitama_1_1Result.html">Result</a>&lt; T, F &gt;</td></tr>
<tr class="memdesc:a1f14132897491554f7996a89e9d2c779"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns res if the result is <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>, otherwise returns the <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> value of self.  <a href="#a1f14132897491554f7996a89e9d2c779">More...</a><br /></td></tr>
<tr class="separator:a1f14132897491554f7996a89e9d2c779"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a40374d9be86d5092f88df445756b87"><td class="memTemplParams" colspan="2">template&lt;class O &gt; </td></tr>
<tr class="memitem:a4a40374d9be86d5092f88df445756b87"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a> (O &amp;&amp;op) const &amp;-&gt; std::enable_if_t&lt; is_result_v&lt; std::invoke_result_t&lt; O, E &gt;&gt;, std::invoke_result_t&lt; O, E &gt;&gt;</td></tr>
<tr class="memdesc:a4a40374d9be86d5092f88df445756b87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls op if the result is <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>, otherwise returns the <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> value of self.  <a href="#a4a40374d9be86d5092f88df445756b87">More...</a><br /></td></tr>
<tr class="separator:a4a40374d9be86d5092f88df445756b87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb022ac9ce31402ae32ac76f7f2f722f"><td class="memTemplParams" colspan="2"><a id="afb022ac9ce31402ae32ac76f7f2f722f"></a>
template&lt;class O &gt; </td></tr>
<tr class="memitem:afb022ac9ce31402ae32ac76f7f2f722f"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><b>or_else</b> (O &amp;&amp;op) &amp;&amp;-&gt; std::enable_if_t&lt; is_result_v&lt; std::invoke_result_t&lt; O, T &gt;&gt;, std::invoke_result_t&lt; O, T &gt;&gt;</td></tr>
<tr class="separator:afb022ac9ce31402ae32ac76f7f2f722f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9791f0b27ce56b4bc766336bdfd6b8bd"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a9791f0b27ce56b4bc766336bdfd6b8bd">unwrap_or</a> (T const &amp;optb) const noexcept</td></tr>
<tr class="memdesc:a9791f0b27ce56b4bc766336bdfd6b8bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>. Else, it returns optb.  <a href="#a9791f0b27ce56b4bc766336bdfd6b8bd">More...</a><br /></td></tr>
<tr class="separator:a9791f0b27ce56b4bc766336bdfd6b8bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a495ed5522bab9f7a96d5ff889120e7"><td class="memTemplParams" colspan="2">template&lt;class O &gt; </td></tr>
<tr class="memitem:a4a495ed5522bab9f7a96d5ff889120e7"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a4a495ed5522bab9f7a96d5ff889120e7">unwrap_or_else</a> (O &amp;&amp;op) const noexcept(std::is_nothrow_invocable_r_v&lt; T, O, E &gt;) -&gt; std::enable_if_t&lt; std::is_invocable_r_v&lt; T, O, E &gt;, T &gt;</td></tr>
<tr class="memdesc:a4a495ed5522bab9f7a96d5ff889120e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>. If the value is an <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> then it calls op with its value.  <a href="#a4a495ed5522bab9f7a96d5ff889120e7">More...</a><br /></td></tr>
<tr class="separator:a4a495ed5522bab9f7a96d5ff889120e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a619561a099b0b53dfcf6b6c40c6c7fac"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a619561a099b0b53dfcf6b6c40c6c7fac">unwrap</a> () const</td></tr>
<tr class="memdesc:a619561a099b0b53dfcf6b6c40c6c7fac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>.  <a href="#a619561a099b0b53dfcf6b6c40c6c7fac">More...</a><br /></td></tr>
<tr class="separator:a619561a099b0b53dfcf6b6c40c6c7fac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13e93b48e2105f8def32e1eca7d9291e"><td class="memItemLeft" align="right" valign="top">E&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a13e93b48e2105f8def32e1eca7d9291e">unwrap_err</a> () const</td></tr>
<tr class="memdesc:a13e93b48e2105f8def32e1eca7d9291e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>.  <a href="#a13e93b48e2105f8def32e1eca7d9291e">More...</a><br /></td></tr>
<tr class="separator:a13e93b48e2105f8def32e1eca7d9291e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aead64317d04a8ba8734237be9fbd8829"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#aead64317d04a8ba8734237be9fbd8829">unwrap_or_default</a> () const &amp;</td></tr>
<tr class="memdesc:aead64317d04a8ba8734237be9fbd8829"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>.  <a href="#aead64317d04a8ba8734237be9fbd8829">More...</a><br /></td></tr>
<tr class="separator:aead64317d04a8ba8734237be9fbd8829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11981c6ceb7f578132388a2f895ace45"><td class="memTemplParams" colspan="2">template&lt;class U , class F &gt; </td></tr>
<tr class="memitem:a11981c6ceb7f578132388a2f895ace45"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a11981c6ceb7f578132388a2f895ace45">operator==</a> (<a class="el" href="classmitama_1_1Result.html">Result</a>&lt; U, F &gt; const &amp;rhs) const &amp;</td></tr>
<tr class="memdesc:a11981c6ceb7f578132388a2f895ace45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Operator== for Result&lt;T, E&gt; and Result&lt;U, F&gt;.  <a href="#a11981c6ceb7f578132388a2f895ace45">More...</a><br /></td></tr>
<tr class="separator:a11981c6ceb7f578132388a2f895ace45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a265995257696a3e81bf80f7eca733a0a"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:a265995257696a3e81bf80f7eca733a0a"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a265995257696a3e81bf80f7eca733a0a">operator==</a> (<a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; const &amp;rhs) const</td></tr>
<tr class="memdesc:a265995257696a3e81bf80f7eca733a0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Operator== for <a class="el" href="classmitama_1_1Result.html" title="data Result = Ok | Err">Result</a> and <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>.  <a href="#a265995257696a3e81bf80f7eca733a0a">More...</a><br /></td></tr>
<tr class="separator:a265995257696a3e81bf80f7eca733a0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e41d8a7c51531949d8604fa451aa06f"><td class="memTemplParams" colspan="2">template&lt;class F &gt; </td></tr>
<tr class="memitem:a6e41d8a7c51531949d8604fa451aa06f"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classmitama_1_1Result.html#a6e41d8a7c51531949d8604fa451aa06f">operator==</a> (<a class="el" href="classmitama_1_1Err.html">Err</a>&lt; F &gt; const &amp;rhs) const</td></tr>
<tr class="memdesc:a6e41d8a7c51531949d8604fa451aa06f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Operator== for Result&lt;T, E&gt; and Err&lt;F&gt;.  <a href="#a6e41d8a7c51531949d8604fa451aa06f">More...</a><br /></td></tr>
<tr class="separator:a6e41d8a7c51531949d8604fa451aa06f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T, class E&gt;<br />
class mitama::Result&lt; T, E &gt;</h3>

<p class="">data <a class="el" href="classmitama_1_1Result.html" title="data Result = Ok | Err">Result</a> = <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> | <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> </p>
<p class=""><a class="el" href="classmitama_1_1Result.html" title="data Result = Ok | Err">Result</a> has a error value or ok value, like variant&lt;Ok, Err&gt;. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a05687844a368c5bd7ba81f9f35bd847d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05687844a368c5bd7ba81f9f35bd847d">&#9670;&nbsp;</a></span>Result() <span class="overload">[1/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classmitama_1_1Result.html">Result</a>&lt; T, E &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor.  Initializes the contained variant as if direct-non-list-initializing an object of type T with the expression *rhs. </p>
<dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of T or E. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall be defined as deleted unless is_copy_constructible_v&lt;T&gt; is true. If is_trivially_copy_constructible_v&lt;T&gt; is true, this constructor shall be a constexpr constructor. </dd></dl>

</div>
</div>
<a id="a6e82030db468393511785af566c99066"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e82030db468393511785af566c99066">&#9670;&nbsp;</a></span>Result() <span class="overload">[2/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Result.html">Result</a>&lt; T, E &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Move constructor.  Initializes the contained variant as if direct-non-list-initializing an object of type T with the expression std::move(*rhs). rhs is unchanged. </p>
<dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of T or E. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>The expression inside noexcept is equivalent to is_nothrow_move_constructible_v&lt;T&gt;. This constructor shall not participate in overload resolution unless is_move_constructible_v&lt;T&gt; is true. If is_trivially_move_constructible_v&lt;T&gt; is true, this constructor shall be a constexpr constructor. </dd></dl>

</div>
</div>
<a id="adbe8630f4bcb322e5483a45b41fb7be1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbe8630f4bcb322e5483a45b41fb7be1">&#9670;&nbsp;</a></span>Result() <span class="overload">[3/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; const &amp;&#160;</td>
          <td class="paramname"><em>ok</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> const&amp; </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type Ok&lt;T&gt; const&amp;. </p><dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of T. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_conctructible_v&lt;T, U&gt; &amp;&amp; is_convertible_v&lt;U, T&gt; is true. </dd></dl>

</div>
</div>
<a id="adbe8630f4bcb322e5483a45b41fb7be1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbe8630f4bcb322e5483a45b41fb7be1">&#9670;&nbsp;</a></span>Result() <span class="overload">[4/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; const &amp;&#160;</td>
          <td class="paramname"><em>ok</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> const&amp; </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type Ok&lt;T&gt; const&amp;. </p><dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of T. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_conctructible_v&lt;T, U&gt; &amp;&amp; !is_convertible_v&lt;U, T&gt; is true. </dd></dl>

</div>
</div>
<a id="ac5136126583dff49a654afb1ed0fba05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5136126583dff49a654afb1ed0fba05">&#9670;&nbsp;</a></span>Result() <span class="overload">[5/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>ok</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>&amp;&amp; </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type Ok&lt;T&gt;&amp;&amp;. </p><dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of T. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_conctructible_v&lt;T, U&gt; &amp;&amp; is_convertible_v&lt;U, T&gt; is true. </dd></dl>

</div>
</div>
<a id="ac5136126583dff49a654afb1ed0fba05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5136126583dff49a654afb1ed0fba05">&#9670;&nbsp;</a></span>Result() <span class="overload">[6/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>ok</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>&amp;&amp; </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type Ok&lt;T&gt;&amp;&amp;. </p><dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of T. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_conctructible_v&lt;T, U&gt; &amp;&amp; !is_convertible_v&lt;U, T&gt; is true. </dd></dl>

</div>
</div>
<a id="ac1e47c8aba033a76f0f5683bd97efc6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1e47c8aba033a76f0f5683bd97efc6f">&#9670;&nbsp;</a></span>Result() <span class="overload">[7/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Err.html">Err</a>&lt; U &gt; const &amp;&#160;</td>
          <td class="paramname"><em>err</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> const&amp; </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type Err&lt;E&gt; const&amp;. </p><dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of E. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_conctructible_v&lt;E, U&gt; &amp;&amp; is_convertible_v&lt;U, E&gt; is true. </dd></dl>

</div>
</div>
<a id="ac1e47c8aba033a76f0f5683bd97efc6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1e47c8aba033a76f0f5683bd97efc6f">&#9670;&nbsp;</a></span>Result() <span class="overload">[8/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Err.html">Err</a>&lt; U &gt; const &amp;&#160;</td>
          <td class="paramname"><em>err</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> const&amp; </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type Err&lt;E&gt; const&amp;. </p><dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of E. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_conctructible_v&lt;E, U&gt; &amp;&amp; !is_convertible_v&lt;U, E&gt; is true. </dd></dl>

</div>
</div>
<a id="acabba586680d639eaa37cfa334a6d08b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acabba586680d639eaa37cfa334a6d08b">&#9670;&nbsp;</a></span>Result() <span class="overload">[9/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Err.html">Err</a>&lt; U &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>err</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>&amp;&amp; </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type Err&lt;E&gt;&amp;&amp;. </p><dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of E. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_conctructible_v&lt;E, U&gt; &amp;&amp; is_convertible_v&lt;U, E&gt; is true. </dd></dl>

</div>
</div>
<a id="acabba586680d639eaa37cfa334a6d08b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acabba586680d639eaa37cfa334a6d08b">&#9670;&nbsp;</a></span>Result() <span class="overload">[10/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Err.html">Err</a>&lt; U &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>err</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>&amp;&amp; </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type Err&lt;E&gt;&amp;&amp;. </p><dl class="section post"><dt>Postcondition</dt><dd>rhs == *this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of E. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_conctructible_v&lt;E, U&gt; &amp;&amp; !is_convertible_v&lt;U, E&gt; is true. </dd></dl>

</div>
</div>
<a id="ab505b0fdee11fdda752f6739825d0ee1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab505b0fdee11fdda752f6739825d0ee1">&#9670;&nbsp;</a></span>Result() <span class="overload">[11/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for ok value </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type with expression (std::in_place_type&lt;Ok&lt;T&gt;&gt;, std::forward&lt;Args&gt;(args)...). </p><dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of T.</td></tr>
  </table>
  </dd>
</dl>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keyword">using</span> my_result = Result&lt;std::tuple&lt;int, int&gt;, std::string&gt;;</div><div class="line"><span class="keyword">auto</span> res = my_result( <a class="code" href="group__Modules.html#gaf58386f8ccc9b356dabcb65066052756">mitama::in_place_ok</a>, 1, 1 ); <span class="comment">// same as `my_result(Ok(std::tuple{1,1}))`</span></div></div><!-- fragment --> 
</div>
</div>
<a id="a9ba3d8d21bac96693800a7b8a744f040"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ba3d8d21bac96693800a7b8a744f040">&#9670;&nbsp;</a></span>Result() <span class="overload">[12/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1in__place__err__t.html">in_place_err_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for ok value </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type with expression (std::in_place_type&lt;Err&lt;E&gt;&gt;, std::forward&lt;Args&gt;(args)...). </p><dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of E.</td></tr>
  </table>
  </dd>
</dl>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keyword">using</span> my_result = Result&lt;int, std::string&gt;;</div><div class="line"><span class="keyword">auto</span> res = my_result( <a class="code" href="group__Modules.html#ga0b85336206d67e37d22ce3da9a9f4a8f">mitama::in_place_err</a>, <span class="charliteral">&#39;a&#39;</span>, 5 ); <span class="comment">// Err(&quot;aaaaa&quot;)</span></div></div><!-- fragment --> 
</div>
</div>
<a id="a5c5b714a99a8998f0182a84cd0c03d17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c5b714a99a8998f0182a84cd0c03d17">&#9670;&nbsp;</a></span>Result() <span class="overload">[13/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U , class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; U &gt;&#160;</td>
          <td class="paramname"><em>il</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for ok value </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type with expression (std::in_place_type&lt;Ok&lt;T&gt;&gt;, il, std::forward&lt;Args&gt;(args)...). </p><dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of T.</td></tr>
  </table>
  </dd>
</dl>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keyword">using</span> my_result = Result&lt;std::vector&lt;int&gt;, std::string&gt;;</div><div class="line"><span class="keyword">auto</span> res = my_result( <a class="code" href="group__Modules.html#gaf58386f8ccc9b356dabcb65066052756">mitama::in_place_ok</a>, {1,2,3,4}); <span class="comment">// Ok([1,2,3,4])</span></div></div><!-- fragment --> 
</div>
</div>
<a id="a5c5b714a99a8998f0182a84cd0c03d17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c5b714a99a8998f0182a84cd0c03d17">&#9670;&nbsp;</a></span>Result() <span class="overload">[14/14]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U , class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::<a class="el" href="classmitama_1_1Result.html">Result</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; U &gt;&#160;</td>
          <td class="paramname"><em>il</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for err value </p>
<p class="">Initializes the contained variant as if in-place-initializing an object of type with expression (std::in_place_type&lt;Err&lt;E&gt;&gt;, il, std::forward&lt;Args&gt;(args)...). </p><dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Any</td><td>exception thrown by the selected constructor of E.</td></tr>
  </table>
  </dd>
</dl>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keyword">using</span> my_result = Result&lt;std::string, std::vector&lt;int&gt;&gt;;</div><div class="line"><span class="keyword">auto</span> res = my_result( <a class="code" href="group__Modules.html#ga0b85336206d67e37d22ce3da9a9f4a8f">mitama::in_place_err</a>, {1,2,3,4}); <span class="comment">// Err([1,2,3,4])</span></div></div><!-- fragment --> 
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a6cfdb95916e61eb1b820313990d91e8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6cfdb95916e61eb1b820313990d91e8d">&#9670;&nbsp;</a></span>and_then()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class O &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::and_then </td>
          <td>(</td>
          <td class="paramtype">O &amp;&amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td> const &amp; -&gt; std::enable_if_t&lt;is_result_v&lt;std::invoke_result_t&lt;O, T&gt;&gt;,
                                                              std::invoke_result_t&lt;O, T&gt;&gt;
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calls op if the result is <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>, otherwise returns the <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> value of self. </p>
<p class="">This function can be used for control flow based on <a class="el" href="classmitama_1_1Result.html" title="data Result = Ok | Err">Result</a> values.</p>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_result_v&lt;std::invoke_result_t&lt;O, T&gt;&gt; is true.</dd></dl>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keyword">auto</span> sq = [](<span class="keywordtype">unsigned</span> x) -&gt; Result&lt;unsigned, unsigned&gt; { <span class="keywordflow">return</span> Ok(x * x); };</div><div class="line"><span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a> = [](<span class="keywordtype">unsigned</span> x) -&gt; Result&lt;unsigned, unsigned&gt; { <span class="keywordflow">return</span> Err(x); };</div><div class="line"></div><div class="line">assert_eq(Ok(2u).<a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(sq).<a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(sq), Ok(16u));</div><div class="line">assert_eq(Ok(2u).<a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(sq).<a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(<a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>), Err(4u));</div><div class="line">assert_eq(Ok(2u).<a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(<a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>).<a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(sq), Err(2u));</div><div class="line">assert_eq(Err(3u).<a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(sq).<a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(sq), Err(3u));</div></div><!-- fragment --> 
</div>
</div>
<a id="a7b8010b01f6dc19ec147d68b3aba7f5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b8010b01f6dc19ec147d68b3aba7f5b">&#9670;&nbsp;</a></span>err() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::optional&lt;E&gt; <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::err </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts from Result&lt;T, E&gt; to std::optional&lt;E&gt;. </p>
<p class="">Converts self into an std::optional&lt;E&gt;, copying self, and discarding the success value, if any.</p>
<h2>Example </h2>
<div class="fragment"><div class="line">Result&lt;unsigned, std::string&gt; x = Ok(2);</div><div class="line">assert_eq(x.err(), None);</div><div class="line"></div><div class="line">Result&lt;unsigned, std::string&gt; y = Err(<span class="stringliteral">&quot;Nothing here&quot;</span>);</div><div class="line">assert_eq(y.err(), Some(<span class="stringliteral">&quot;Nothing here&quot;</span>));</div></div><!-- fragment --> 
</div>
</div>
<a id="a9c9d99621b6a1fd42ca8225051c7eefc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c9d99621b6a1fd42ca8225051c7eefc">&#9670;&nbsp;</a></span>err() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::optional&lt;E&gt; <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::err </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> &amp;&amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts from Result&lt;T, E&gt; to std::optional&lt;E&gt;. </p>
<p class="">Converts self into an std::optional&lt;E&gt;, consuming self, and discarding the success value, if any. </p>

</div>
</div>
<a id="a5918499b796baa86637089606fd41212"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5918499b796baa86637089606fd41212">&#9670;&nbsp;</a></span>is_err()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::is_err </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the result is <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>. </p>
<h2>Example </h2>
<div class="fragment"><div class="line">Result&lt;uint32_t, std::string&gt; x = Ok(-3);</div><div class="line">assert(x.is_err(), <span class="keyword">false</span>);</div><div class="line"></div><div class="line">Result&lt;uint32_t, std::string&gt; y = Err(<span class="stringliteral">&quot;Some error message&quot;</span>);</div><div class="line">assert_(y.is_err(), <span class="keyword">true</span>);</div></div><!-- fragment --> 
</div>
</div>
<a id="aeab33770153c67c98a2db599aff74896"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeab33770153c67c98a2db599aff74896">&#9670;&nbsp;</a></span>is_ok()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::is_ok </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the result is <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>. </p>
<h2>Example </h2>
<div class="fragment"><div class="line">Result&lt;uint32_t, std::string&gt; x = Ok(-3);</div><div class="line">assert(x.is_ok(), <span class="keyword">true</span>);</div><div class="line"></div><div class="line">Result&lt;uint32_t, std::string&gt; y = Err(<span class="stringliteral">&quot;Some error message&quot;</span>);</div><div class="line">assert(y.is_ok(), <span class="keyword">false</span>);</div></div><!-- fragment --> 
</div>
</div>
<a id="a73ec80af11f3a45db1c17135e23bf91c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73ec80af11f3a45db1c17135e23bf91c">&#9670;&nbsp;</a></span>map()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class O &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::map </td>
          <td>(</td>
          <td class="paramtype">O &amp;&amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td> const &amp; -&gt; std::enable_if_t&lt;std::is_invocable_v&lt;O, T&gt;,
                                                         <a class="el" href="classmitama_1_1Result.html">Result</a>&lt;std::invoke_result_t&lt;O, T&gt;, E&gt;&gt;
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Maps a Result&lt;T, E&gt; to Result&lt;U, E&gt; by applying a function to a contained <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> value, leaving an <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> value untouched. </p>
<p class="">This function can be used to compose the results of two functions.</p>
<h2>Example </h2>
<div class="fragment"><div class="line">std::string line = <span class="stringliteral">&quot;1,3,5,7&quot;</span>;</div><div class="line"></div><div class="line"><span class="keywordflow">for</span> (<span class="keyword">auto</span> num : split(line, <span class="stringliteral">&quot;,&quot;</span>))</div><div class="line">{</div><div class="line">  <span class="keywordflow">if</span> (<span class="keyword">auto</span> res = parse&lt;int&gt;(num).<a class="code" href="classmitama_1_1Result.html#a73ec80af11f3a45db1c17135e23bf91c">map</a>(_1 * 2); res.is_ok())</div><div class="line">  {</div><div class="line">    assert_true(res.ok().value() % 2 == 0);</div><div class="line">  }</div><div class="line">}</div></div><!-- fragment --> 
</div>
</div>
<a id="a9fdd7a4b731485784fc734994cbcf700"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fdd7a4b731485784fc734994cbcf700">&#9670;&nbsp;</a></span>map_err()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class O &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::map_err </td>
          <td>(</td>
          <td class="paramtype">O &amp;&amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td> const &amp; -&gt; std::enable_if_t&lt;std::is_invocable_v&lt;O, E&gt;,
                                                             <a class="el" href="classmitama_1_1Result.html">Result</a>&lt;T, std::invoke_result_t&lt;O, E&gt;&gt;&gt;
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Maps a Result&lt;T, E&gt; to Result&lt;T, F&gt; by applying a function to a contained <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> value, leaving an <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> value untouched. </p>
<p class="">This function can be used to pass through a successful result while handling an error.</p>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keyword">auto</span> stringify = [](<span class="keywordtype">unsigned</span> x) -&gt; std::string{</div><div class="line">  <span class="keywordflow">return</span> <span class="stringliteral">&quot;error code: &quot;</span>s + std::to_string(x);</div><div class="line">};</div><div class="line"></div><div class="line">Result&lt;unsigned, unsigned&gt; x = Ok(2);</div><div class="line">assert_eq(x.map_err(stringify), Ok(2u));</div><div class="line"></div><div class="line">Result&lt;unsigned, unsigned&gt; y = Err(13);</div><div class="line">assert_eq(y.map_err(stringify), Err(<span class="stringliteral">&quot;error code: 13&quot;</span>s));</div></div><!-- fragment --> 
</div>
</div>
<a id="a59edaa99e2fc00599a2f76433b399a6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59edaa99e2fc00599a2f76433b399a6f">&#9670;&nbsp;</a></span>ok() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::optional&lt;T&gt; <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::ok </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts from Result&lt;T, E&gt; to std::optional&lt;T&gt;. </p>
<p class="">Converts self into an std::optional&lt;T&gt;, copying self, and discarding the error, if any.</p>
<h2>Example </h2>
<div class="fragment"><div class="line">Result&lt;unsigned, std::string&gt; x = Ok(2);</div><div class="line">assert_eq(x.err(), None);</div><div class="line"></div><div class="line">Result&lt;int, std::string&gt; y = Err(<span class="stringliteral">&quot;Nothing here&quot;</span>);</div><div class="line">assert_eq(y.err(), Some(<span class="stringliteral">&quot;Nothing here&quot;</span>));</div></div><!-- fragment --> 
</div>
</div>
<a id="a39154f3c115ff133e2750f115a911c4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39154f3c115ff133e2750f115a911c4b">&#9670;&nbsp;</a></span>ok() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::optional&lt;T&gt; <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::ok </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> &amp;&amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts from Result&lt;T, E&gt; to std::optional&lt;T&gt;. </p>
<p class="">Converts self into an std::optional&lt;T&gt;, comsuming self, and discarding the error, if any. </p>

</div>
</div>
<a id="ae2f98b94748ee8e7577d5fe12a64a7b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2f98b94748ee8e7577d5fe12a64a7b2">&#9670;&nbsp;</a></span>operator &amp;&amp;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Result.html">Result</a>&lt; U, E &gt; const &amp;&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td> const &amp; -&gt; <a class="el" href="classmitama_1_1Result.html">Result</a>&lt;U, E&gt;
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns res if the result is <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>, otherwise returns the <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> value of self. </p>
<h2>Example </h2>
<div class="fragment"><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Ok(2);</div><div class="line">  Result&lt;std::string, std::string&gt; y = Err(<span class="stringliteral">&quot;late error&quot;</span>s);</div><div class="line">  assert_eq(x &amp;&amp; y, Err(<span class="stringliteral">&quot;late error&quot;</span>s));</div><div class="line">}</div><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Err(<span class="stringliteral">&quot;early error&quot;</span>s);</div><div class="line">  Result&lt;std::string, std::string&gt; y = Ok(<span class="stringliteral">&quot;foo&quot;</span>s);</div><div class="line">  assert_eq(x &amp;&amp; y, Err(<span class="stringliteral">&quot;early error&quot;</span>s));</div><div class="line">}</div><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Err(<span class="stringliteral">&quot;not a 2&quot;</span>s);</div><div class="line">  Result&lt;std::string, std::string&gt; y = Err(<span class="stringliteral">&quot;late error&quot;</span>s);</div><div class="line">  assert_eq(x &amp;&amp; y, Err(<span class="stringliteral">&quot;not a 2&quot;</span>s));</div><div class="line">}</div><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Ok(2);</div><div class="line">  Result&lt;std::string, std::string&gt; y = Ok(<span class="stringliteral">&quot;different result type&quot;</span>s);</div><div class="line">  assert_eq(x &amp;&amp; y, Ok(<span class="stringliteral">&quot;different result type&quot;</span>s));</div><div class="line">}</div></div><!-- fragment --> 
</div>
</div>
<a id="a11981c6ceb7f578132388a2f895ace45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11981c6ceb7f578132388a2f895ace45">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U , class F &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Result.html">Result</a>&lt; U, F &gt; const &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Operator== for Result&lt;T, E&gt; and Result&lt;U, F&gt;. </p>
<dl class="section remark"><dt>Remarks</dt><dd>This operator shall be defined as deleted unless std::declval&lt;T const&amp;&gt;() == std::declval&lt;U const&amp;&gt;() is valid expression and std::declval&lt;E const&amp;&gt;() == std::declval&lt;F const&amp;&gt;() is valid expression. </dd></dl>

</div>
</div>
<a id="a265995257696a3e81bf80f7eca733a0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a265995257696a3e81bf80f7eca733a0a">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Ok.html">Ok</a>&lt; U &gt; const &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Operator== for <a class="el" href="classmitama_1_1Result.html" title="data Result = Ok | Err">Result</a> and <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>true if this has <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> value this-&gt;<a class="el" href="classmitama_1_1Result.html#a619561a099b0b53dfcf6b6c40c6c7fac" title="Unwraps a result, yielding the content of an Ok.">unwrap()</a> equals rhs value, otherwise false. </dd></dl>
<dl class="section remark"><dt>Remarks</dt><dd>This operator shall be defined as deleted unless std::declval&lt;T const&amp;&gt;() == std::declval&lt;U const&amp;&gt;() is valid expression. </dd></dl>

</div>
</div>
<a id="a6e41d8a7c51531949d8604fa451aa06f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e41d8a7c51531949d8604fa451aa06f">&#9670;&nbsp;</a></span>operator==() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class F &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Err.html">Err</a>&lt; F &gt; const &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Operator== for Result&lt;T, E&gt; and Err&lt;F&gt;. </p>
<dl class="section return"><dt>Returns</dt><dd>true if this has <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> value this-&gt;<a class="el" href="classmitama_1_1Result.html#a13e93b48e2105f8def32e1eca7d9291e" title="Unwraps a result, yielding the content of an Err.">unwrap_err()</a> equals rhs value, otherwise false. </dd></dl>
<dl class="section remark"><dt>Remarks</dt><dd>This operator shall be defined as deleted unless std::declval&lt;E const&amp;&gt;() == std::declval&lt;F const&amp;&gt;() is valid expression. </dd></dl>

</div>
</div>
<a id="a1f14132897491554f7996a89e9d2c779"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f14132897491554f7996a89e9d2c779">&#9670;&nbsp;</a></span>operator||()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class F &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::operator|| </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmitama_1_1Result.html">Result</a>&lt; T, F &gt; const &amp;&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td> const &amp; -&gt; <a class="el" href="classmitama_1_1Result.html">Result</a>&lt;T, F&gt;
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns res if the result is <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>, otherwise returns the <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> value of self. </p>
<p class="">Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated.</p>
<h2>Example </h2>
<div class="fragment"><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Ok(2);</div><div class="line">  Result&lt;unsigned, std::string&gt; y = Err(<span class="stringliteral">&quot;late error&quot;</span>s);</div><div class="line">  assert_eq(x || y, Ok(2u));</div><div class="line">}</div><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Err(<span class="stringliteral">&quot;early error&quot;</span>s);</div><div class="line">  Result&lt;unsigned, std::string&gt; y = Ok(2);</div><div class="line">  assert_eq(x || y, Ok(2u));</div><div class="line">}</div><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Err(<span class="stringliteral">&quot;not a 2&quot;</span>s);</div><div class="line">  Result&lt;unsigned, std::string&gt; y = Err(<span class="stringliteral">&quot;late error&quot;</span>s);</div><div class="line">  assert_eq(x || y, Err(<span class="stringliteral">&quot;late error&quot;</span>s));</div><div class="line">}</div><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Ok(2);</div><div class="line">  Result&lt;unsigned, std::string&gt; y = Ok(100);</div><div class="line">  assert_eq(x || y, Ok(2u));</div><div class="line">}</div></div><!-- fragment --> 
</div>
</div>
<a id="a4a40374d9be86d5092f88df445756b87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a40374d9be86d5092f88df445756b87">&#9670;&nbsp;</a></span>or_else()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class O &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::or_else </td>
          <td>(</td>
          <td class="paramtype">O &amp;&amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td> const &amp; -&gt; std::enable_if_t&lt;is_result_v&lt;std::invoke_result_t&lt;O, E&gt;&gt;,
                                                             std::invoke_result_t&lt;O, E&gt;&gt;
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calls op if the result is <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>, otherwise returns the <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a> value of self. </p>
<p class="">This function can be used for control flow based on result values.</p>
<dl class="section remark"><dt>Remarks</dt><dd>This constructor shall not participate in overload resolution unless is_result_v&lt;std::invoke_result_t&lt;O, T&gt;&gt; is true.</dd></dl>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keyword">auto</span> sq = [](<span class="keywordtype">unsigned</span> x) -&gt; Result&lt;unsigned, unsigned&gt; { <span class="keywordflow">return</span> Ok(x * x); };</div><div class="line"><span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a> = [](<span class="keywordtype">unsigned</span> x) -&gt; Result&lt;unsigned, unsigned&gt; { <span class="keywordflow">return</span> Err(x); };</div><div class="line"></div><div class="line">assert_eq(Ok(2).<a class="code" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a>(sq).<a class="code" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a>(sq), Ok(2u));</div><div class="line">assert_eq(Ok(2).<a class="code" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a>(<a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>).<a class="code" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a>(sq), Ok(2u));</div><div class="line">assert_eq(Err(3).<a class="code" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a>(sq).<a class="code" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a>(<a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>), Ok(9u));</div><div class="line">assert_eq(Err(3).<a class="code" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a>(<a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>).<a class="code" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a>(<a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>), Err(3u));</div></div><!-- fragment --> 
</div>
</div>
<a id="a619561a099b0b53dfcf6b6c40c6c7fac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a619561a099b0b53dfcf6b6c40c6c7fac">&#9670;&nbsp;</a></span>unwrap()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::unwrap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>. </p>
<h2>Example </h2>
<div class="fragment"><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Ok(2);</div><div class="line">  assert_eq(x.unwrap(), 2);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordflow">try</span> {</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Err(<span class="stringliteral">&quot;emergency failure&quot;</span>s);</div><div class="line">  x.unwrap(); <span class="comment">// panics with `emergency failure`</span></div><div class="line">}</div><div class="line"><span class="keywordflow">catch</span> ( mitama::runtime_panic cosnt &amp; panic ) {</div><div class="line">  std::err &lt;&lt; panic.what() &lt;&lt; std::endl; <span class="comment">// `emergency failure`</span></div><div class="line">}</div></div><!-- fragment --> 
</div>
</div>
<a id="a13e93b48e2105f8def32e1eca7d9291e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13e93b48e2105f8def32e1eca7d9291e">&#9670;&nbsp;</a></span>unwrap_err()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">E <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::unwrap_err </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>. </p>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keywordflow">try</span> {</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Ok(2);</div><div class="line">  x.unwrap_err(); <span class="comment">// panics with `2`</span></div><div class="line">}</div><div class="line"><span class="keywordflow">catch</span> (runtime_panic <span class="keyword">const</span> &amp;panic)</div><div class="line">{</div><div class="line">   std::err &lt;&lt; panic.what() &lt;&lt; std::endl; <span class="comment">// 2</span></div><div class="line">}</div><div class="line"></div><div class="line">{</div><div class="line">  Result&lt;unsigned, std::string&gt; x = Err(<span class="stringliteral">&quot;emergency failure&quot;</span>s);</div><div class="line">  assert_eq(x.unwrap_err(), <span class="stringliteral">&quot;emergency failure&quot;</span>s);</div><div class="line">}</div></div><!-- fragment --> 
</div>
</div>
<a id="a9791f0b27ce56b4bc766336bdfd6b8bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9791f0b27ce56b4bc766336bdfd6b8bd">&#9670;&nbsp;</a></span>unwrap_or()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::unwrap_or </td>
          <td>(</td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>optb</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>. Else, it returns optb. </p>
<p class="">Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated.</p>
<h2>Example </h2>
<div class="fragment"><div class="line">Result&lt;unsigned, unsigned&gt; <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a> = Err(2);</div><div class="line">Result&lt;unsigned, unsigned&gt; <a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a> = Ok(2);</div><div class="line"></div><div class="line">assert_eq(<a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>.unwrap_or(1u), 2u);</div><div class="line">assert_eq(<a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>.unwrap_or(1u), 1u);</div></div><!-- fragment --> 
</div>
</div>
<a id="aead64317d04a8ba8734237be9fbd8829"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aead64317d04a8ba8734237be9fbd8829">&#9670;&nbsp;</a></span>unwrap_or_default()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::unwrap_or_default </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a>. </p>
<dl class="section remark"><dt>Remarks</dt><dd>This operator shall be defined as deleted unless is_default_constructible_v&lt;T&gt; is true.</dd></dl>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keyword">auto</span> good_year_from_input = <span class="stringliteral">&quot;1909&quot;</span>s;</div><div class="line"><span class="keyword">auto</span> bad_year_from_input = <span class="stringliteral">&quot;190blarg&quot;</span>s;</div><div class="line"><span class="keyword">auto</span> good_year = parse&lt;int&gt;(good_year_from_input).<a class="code" href="classmitama_1_1Result.html#aead64317d04a8ba8734237be9fbd8829">unwrap_or_default</a>();</div><div class="line"><span class="keyword">auto</span> bad_year = parse&lt;int&gt;(bad_year_from_input).<a class="code" href="classmitama_1_1Result.html#aead64317d04a8ba8734237be9fbd8829">unwrap_or_default</a>();</div><div class="line"></div><div class="line">assert_eq(1909, good_year);</div><div class="line">assert_eq(0, bad_year);   * </div></div><!-- fragment --> 
</div>
</div>
<a id="a4a495ed5522bab9f7a96d5ff889120e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a495ed5522bab9f7a96d5ff889120e7">&#9670;&nbsp;</a></span>unwrap_or_else()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class E&gt; </div>
<div class="memtemplate">
template&lt;class O &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classmitama_1_1Result.html">mitama::Result</a>&lt; T, E &gt;::unwrap_or_else </td>
          <td>(</td>
          <td class="paramtype">O &amp;&amp;&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td> const -&gt; std::enable_if_t&lt;std::is_invocable_r_v&lt;T, O, E&gt;, T&gt;
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unwraps a result, yielding the content of an <a class="el" href="classmitama_1_1Ok.html" title="Ok stat generator class.">Ok</a>. If the value is an <a class="el" href="classmitama_1_1Err.html" title="Error stat generator class.">Err</a> then it calls op with its value. </p>
<h2>Example </h2>
<div class="fragment"><div class="line"><span class="keyword">auto</span> count = [](std::stringx) -&gt; <span class="keywordtype">size_t</span> { <span class="keywordflow">return</span> x.size(); };</div><div class="line"></div><div class="line">assert_eq(Ok(2).<a class="code" href="classmitama_1_1Result.html#a4a495ed5522bab9f7a96d5ff889120e7">unwrap_or_else</a>(count), 2);</div><div class="line">assert_eq(Err(<span class="stringliteral">&quot;foo&quot;</span>s).<a class="code" href="classmitama_1_1Result.html#a4a495ed5522bab9f7a96d5ff889120e7">unwrap_or_else</a>(count), 3);</div></div><!-- fragment --> 
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Result_8hpp_source.html">Result.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.15
</small></address>
</body>
</html>
