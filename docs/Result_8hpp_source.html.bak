<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>My Project: Result.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">My Project
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Result.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Result_8hpp.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;boost/format.hpp&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;optional&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;variant&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#define PANIC(...) \</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">  throw ::mitama::runtime_panic { macro_use, __FILE__, __LINE__, __VA_ARGS__ }</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">class </span>macro_use_tag_t{};</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">inline</span> <span class="keyword">static</span> constexpr macro_use_tag_t macro_use{};</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacemitama.html">mitama</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span>runtime_panic : <span class="keyword">public</span> std::runtime_error</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  runtime_panic(boost::format fmt, Args &amp;&amp;... args) noexcept</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      : std::runtime_error((fmt % ... % args).str()) {}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keyword">explicit</span> runtime_panic(macro_use_tag_t, <span class="keyword">const</span> <span class="keywordtype">char</span> *func, <span class="keywordtype">int</span> line, std::string fmt, Args &amp;&amp;... args) noexcept</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      : std::runtime_error(</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            std::string{<span class="stringliteral">&quot;runtime panicked at &#39;&quot;</span>} + (boost::format(fmt) % ... % args).str() +</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            (boost::format(<span class="stringliteral">&quot;&#39;, %1%:%2%&quot;</span>) % std::string{func} % line).str()) {}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;};</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span>&gt;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="structmitama_1_1is__result.html">   64</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structmitama_1_1is__result.html">is_result</a> : std::false_type{};</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> E&gt;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">struct </span><a class="code" href="structmitama_1_1is__result.html">is_result</a>&lt;<a class="code" href="classmitama_1_1Result.html">Result</a>&lt;T, E&gt;&gt; : std::true_type{};</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="Result_8hpp.html#a871394f3df1fc83ab0daf932219314d7">   75</a></span>&#160;<span class="keyword">inline</span> constexpr <span class="keywordtype">bool</span> <a class="code" href="Result_8hpp.html#a871394f3df1fc83ab0daf932219314d7">is_result_v</a> = <a class="code" href="structmitama_1_1is__result.html">is_result&lt;T&gt;::value</a>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span>&gt;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="structmitama_1_1is__err__type.html">   81</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structmitama_1_1is__err__type.html">is_err_type</a> : std::false_type{};</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">struct </span><a class="code" href="structmitama_1_1is__err__type.html">is_err_type</a>&lt;<a class="code" href="classmitama_1_1Err.html">Err</a>&lt;T&gt;&gt; : std::true_type{};</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span>&gt;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="structmitama_1_1is__ok__type.html">   92</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structmitama_1_1is__ok__type.html">is_ok_type</a> : std::false_type{};</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">struct </span><a class="code" href="structmitama_1_1is__ok__type.html">is_ok_type</a>&lt;<a class="code" href="classmitama_1_1Ok.html">Ok</a>&lt;T&gt;&gt; : std::true_type{};</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;} <span class="comment">// namespace mitama</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span><span class="preprocessor">#include &quot;result/result_impl.hpp&quot;</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacemitama.html">mitama</a></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html">  112</a></span>&#160;<span class="keyword">class </span><a class="code" href="classmitama_1_1Ok.html">Ok</a></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  T x; </div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a445eabde6500cc7d7e2e5d12a7c6f161">  116</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classmitama_1_1Ok.html#a445eabde6500cc7d7e2e5d12a7c6f161">ok_type</a> = T; </div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keyword">using</span> err_type = void;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <a class="code" href="classmitama_1_1Ok.html#a75436d36664fbc02baf8ec5dbdd1346c">Ok</a>() = <span class="keyword">delete</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a89cb41e5f09c22344d442886c92a3284">  132</a></span>&#160;  constexpr <a class="code" href="classmitama_1_1Ok.html#a89cb41e5f09c22344d442886c92a3284">Ok</a>(U &amp;&amp;u) noexcept(std::is_nothrow_constructible_v&lt;T, U&gt;)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      : x(std::forward&lt;U&gt;(u)) {}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#abe79382e921436cdde8213ed5d0ac20b">  142</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Ok.html#abe79382e921436cdde8213ed5d0ac20b">Ok</a>(U &amp;&amp; u) noexcept(std::is_nothrow_constructible_v&lt;T, U&gt;)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      : x(std::forward&lt;U&gt;(u)) {}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a2ced75f08cb99f89f4a13c4b2c1f09ca">  152</a></span>&#160;  constexpr <a class="code" href="classmitama_1_1Ok.html#a2ced75f08cb99f89f4a13c4b2c1f09ca">Ok</a>(<span class="keyword">const</span> <a class="code" href="classmitama_1_1Ok.html">Ok&lt;U&gt;</a> &amp;t) noexcept(std::is_nothrow_constructible_v&lt;T, U&gt;)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      : x(t.x) {}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a2ced75f08cb99f89f4a13c4b2c1f09ca">  162</a></span>&#160;  <span class="keyword">explicit</span> constexpr <a class="code" href="classmitama_1_1Ok.html#a2ced75f08cb99f89f4a13c4b2c1f09ca">Ok</a>(<span class="keyword">const</span> <a class="code" href="classmitama_1_1Ok.html">Ok&lt;U&gt;</a> &amp;t) noexcept(std::is_nothrow_constructible_v&lt;T, U&gt;)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      : x(t.x) {}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#af48a3b6577f93520461225c2e47bb0b6">  173</a></span>&#160;  constexpr <a class="code" href="classmitama_1_1Ok.html#af48a3b6577f93520461225c2e47bb0b6">Ok</a>(<a class="code" href="classmitama_1_1Ok.html">Ok&lt;U&gt;</a> &amp;&amp; t) noexcept(std::is_nothrow_constructible_v&lt;T, U&gt;)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      : x(std::move(t.x)) {}</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#af48a3b6577f93520461225c2e47bb0b6">  184</a></span>&#160;  <span class="keyword">explicit</span> constexpr <a class="code" href="classmitama_1_1Ok.html#af48a3b6577f93520461225c2e47bb0b6">Ok</a>(<a class="code" href="classmitama_1_1Ok.html">Ok&lt;U&gt;</a> &amp;&amp; t) noexcept(std::is_nothrow_constructible_v&lt;T, U&gt;)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      : x(std::move(t.x)) {}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a0e8bfe3d3978d48d47ad6c6e66dbad30">  194</a></span>&#160;  <span class="keyword">explicit</span> constexpr <a class="code" href="classmitama_1_1Ok.html#a0e8bfe3d3978d48d47ad6c6e66dbad30">Ok</a>(std::in_place_t, Args &amp;&amp; ... args) noexcept(std::is_nothrow_constructible_v&lt;T, Args...&gt;)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      : x(std::forward&lt;Args&gt;(args)...) {}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#aa13266203c15ddfc2ae5b899f2175206">  202</a></span>&#160;  constexpr std::true_type <a class="code" href="classmitama_1_1Ok.html#aa13266203c15ddfc2ae5b899f2175206">is_ok</a>() const noexcept { <span class="keywordflow">return</span> {}; }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a6248b52809006a89ab59f3b43fbaf155">  209</a></span>&#160;  constexpr std::false_type <a class="code" href="classmitama_1_1Ok.html#a6248b52809006a89ab59f3b43fbaf155">is_err</a>() const noexcept { <span class="keywordflow">return</span> {}; }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> Op&gt;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a1d2e601e7dc743326a6f557105a90f14">  217</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Ok.html#a1d2e601e7dc743326a6f557105a90f14">and_then</a>(Op &amp;&amp; op) noexcept(noexcept(std::declval&lt;Op&gt;()(std::declval&lt;T &amp;&gt;())))</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      -&gt;std::enable_if_t&lt;is_result_v&lt;std::invoke_result_t&lt;Op, T&gt;&gt;,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                         std::invoke_result_t&lt;Op, T&gt;&gt;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">return</span> std::forward&lt;Op&gt;(op)(this-&gt;x);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> Op&gt;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a1110646673cb0f97a5596d57296c4e28">  230</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Ok.html#a1110646673cb0f97a5596d57296c4e28">or_else</a>(Op &amp;&amp;) noexcept</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a57a9bc88ce42d6821379857164f8343e">  241</a></span>&#160;  T <a class="code" href="classmitama_1_1Ok.html#a57a9bc88ce42d6821379857164f8343e">unwrap_or_else</a>(O &amp;&amp;) const noexcept</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T_, <span class="keyword">class</span> E_&gt;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <span class="keywordtype">bool</span></div><div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#afdfadaecb84a0fb144eb9b8b2c0ee2e4">  251</a></span>&#160;  <a class="code" href="classmitama_1_1Ok.html#afdfadaecb84a0fb144eb9b8b2c0ee2e4">operator==</a>(<a class="code" href="classmitama_1_1Result.html">Result&lt;T_, E_&gt;</a> <span class="keyword">const</span> &amp;rhs)<span class="keyword"> const</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">return</span> rhs.<a class="code" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a>() ? rhs.<a class="code" href="classmitama_1_1Result.html#a619561a099b0b53dfcf6b6c40c6c7fac">unwrap</a>() == this-&gt;x : <span class="keyword">false</span>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T_&gt;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="keywordtype">bool</span></div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#ae2998c7b9ed98d4b6dae7d32f8a1ede6">  261</a></span>&#160;  <a class="code" href="classmitama_1_1Ok.html#ae2998c7b9ed98d4b6dae7d32f8a1ede6">operator==</a>(<a class="code" href="classmitama_1_1Ok.html">Ok&lt;T_&gt;</a> <span class="keyword">const</span> &amp;rhs)<span class="keyword"> const</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">return</span> this-&gt;x == rhs.x;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> E_&gt;</div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a1711480b52476a6e6dfd01beafdde58e">  270</a></span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="classmitama_1_1Ok.html#a1711480b52476a6e6dfd01beafdde58e">operator==</a>(<a class="code" href="classmitama_1_1Err.html">Err&lt;E_&gt;</a> <span class="keyword">const</span> &amp;)<span class="keyword"> const</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="classmitama_1_1Ok.html#a35a8fa198d3ea688dc0b7caba910d895">  283</a></span>&#160;  <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="classmitama_1_1Ok.html#a35a8fa198d3ea688dc0b7caba910d895">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classmitama_1_1Ok.html">Ok</a> &amp;ok)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">return</span> ok.print(os);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;};</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> E&gt;</div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html">  296</a></span>&#160;<span class="keyword">class </span><a class="code" href="classmitama_1_1Err.html">Err</a></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;{</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  E x; </div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="keyword">using</span> ok_type = void;</div><div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a45d53378b5ac5a37085c6814dd2fec29">  301</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classmitama_1_1Err.html#a45d53378b5ac5a37085c6814dd2fec29">err_type</a> = E; </div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <a class="code" href="classmitama_1_1Err.html#a484e75002a5f7b15991300713b71660c">Err</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00322"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a53d02248b1465846813f662c53c33303">  322</a></span>&#160;  <a class="code" href="classmitama_1_1Err.html#a53d02248b1465846813f662c53c33303">Err</a>(U &amp;&amp; u) noexcept(std::is_nothrow_constructible_v&lt;E, U&gt;)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;      : x(std::forward&lt;U&gt;(u)) {}</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a53d02248b1465846813f662c53c33303">  335</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Err.html#a53d02248b1465846813f662c53c33303">Err</a>(U &amp;&amp; u) noexcept(std::is_nothrow_constructible_v&lt;E, U&gt;)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;      : x(std::forward&lt;U&gt;(u)) {}</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            where&lt;std::negation&lt;std::is_same&lt;E, U&gt;&gt;,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                  std::is_constructible&lt;E, const U &amp;&gt;,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                  std::is_convertible&lt;const U &amp;, E&gt;&gt; = required&gt;</div><div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#aa8e86c0ff44addc499eacf1777907c69">  351</a></span>&#160;  constexpr <a class="code" href="classmitama_1_1Err.html#aa8e86c0ff44addc499eacf1777907c69">Err</a>(<span class="keyword">const</span> <a class="code" href="classmitama_1_1Err.html">Err&lt;U&gt;</a> &amp;t) noexcept(std::is_nothrow_constructible_v&lt;E, U&gt;)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;      : x(t.x) {}</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a2ea24b1f10f356230fd2e90f20f3ae8f">  364</a></span>&#160;  <span class="keyword">explicit</span> constexpr <a class="code" href="classmitama_1_1Err.html#a2ea24b1f10f356230fd2e90f20f3ae8f">Err</a>(<span class="keyword">const</span> <a class="code" href="classmitama_1_1Err.html">Err&lt;U&gt;</a> &amp;t) noexcept(std::is_nothrow_constructible_v&lt;E, U&gt;)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      : x(t.x) {}</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a3c6f3a19f41c7fddc5f5413d2c7f0cb6">  377</a></span>&#160;  constexpr <a class="code" href="classmitama_1_1Err.html#a3c6f3a19f41c7fddc5f5413d2c7f0cb6">Err</a>(<a class="code" href="classmitama_1_1Err.html">Err&lt;U&gt;</a> &amp;&amp; t) noexcept(std::is_nothrow_constructible_v&lt;E, U&gt;)</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;      : x(std::move(t.x)) {}</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a3c6f3a19f41c7fddc5f5413d2c7f0cb6">  390</a></span>&#160;  <span class="keyword">explicit</span> constexpr <a class="code" href="classmitama_1_1Err.html#a3c6f3a19f41c7fddc5f5413d2c7f0cb6">Err</a>(<a class="code" href="classmitama_1_1Err.html">Err&lt;U&gt;</a> &amp;&amp; t) noexcept(std::is_nothrow_constructible_v&lt;E, U&gt;)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;      : x(std::move(t.x)) {}</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a602ba574f115f8e31a6e8e0bffbeaeb2">  403</a></span>&#160;  <span class="keyword">explicit</span> constexpr <a class="code" href="classmitama_1_1Err.html#a602ba574f115f8e31a6e8e0bffbeaeb2">Err</a>(std::in_place_t, Args &amp;&amp; ... args) noexcept(std::is_nothrow_constructible_v&lt;E, Args...&gt;)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;      : x(std::forward&lt;Args&gt;(args)...) {}</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a575ea27a608c993b31910f76a0d03fbc">  411</a></span>&#160;  constexpr std::false_type <a class="code" href="classmitama_1_1Err.html#a575ea27a608c993b31910f76a0d03fbc">is_ok</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> {}; }</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a8116f989d56da2b15b355296512f3875">  418</a></span>&#160;  constexpr std::true_type <a class="code" href="classmitama_1_1Err.html#a8116f989d56da2b15b355296512f3875">is_err</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> {}; }</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> Op&gt;</div><div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#abbd4aa6daa0fa9f8d01babd24a47d76a">  426</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Err.html#abbd4aa6daa0fa9f8d01babd24a47d76a">and_then</a>(Op &amp;&amp;)</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  {</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  }</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> Op&gt;</div><div class="line"><a name="l00437"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#ad95e90ed3c432a60966e20a00f59f432">  437</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Err.html#ad95e90ed3c432a60966e20a00f59f432">or_else</a>(Op &amp;&amp; op)</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;      -&gt;std::enable_if_t&lt;is_result_v&lt;std::invoke_result_t&lt;Op, E&gt;&gt;,</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                         std::invoke_result_t&lt;Op, E&gt;&gt;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">return</span> std::forward&lt;Op&gt;(op)(this-&gt;x);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;  }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l00450"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#a486bdfecd91c87f6a3b61e848794f1eb">  450</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Err.html#a486bdfecd91c87f6a3b61e848794f1eb">unwrap_or_else</a>(O &amp;&amp; op) <span class="keyword">const</span> noexcept</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  {</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">return</span> std::forward&lt;O&gt;(op)(x);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  }</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T_, <span class="keyword">class</span> E_&gt;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  <span class="keywordtype">bool</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;  operator==(<a class="code" href="classmitama_1_1Result.html">Result&lt;T_, E_&gt;</a> <span class="keyword">const</span> &amp;rhs)<span class="keyword"> const</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> rhs.<a class="code" href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">is_err</a>() ? rhs.<a class="code" href="classmitama_1_1Result.html#a13e93b48e2105f8def32e1eca7d9291e">unwrap_err</a>() == this-&gt;x : <span class="keyword">false</span>;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> E_&gt;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  <span class="keywordtype">bool</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  operator==(Err&lt;E_&gt; <span class="keyword">const</span> &amp;rhs)<span class="keyword"> const</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keywordflow">return</span> this-&gt;x == rhs.x;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  }</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T_&gt;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  <span class="keywordtype">bool</span> operator==(Ok&lt;T_&gt; <span class="keyword">const</span> &amp;)<span class="keyword"> const</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  }</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno"><a class="line" href="classmitama_1_1Err.html#af13923664f23e33efdc7e8b9ddb7fb61">  483</a></span>&#160;  <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="classmitama_1_1Err.html#af13923664f23e33efdc7e8b9ddb7fb61">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classmitama_1_1Err.html">Err</a> &amp;err)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;  {</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordflow">return</span> err.print(os);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;  }</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;};</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="keyword">inline</span> constexpr <span class="keyword">auto</span> None = std::nullopt;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;constexpr std::optional&lt;std::decay_t&lt;T&gt;&gt; Some(T &amp;&amp;x)</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;{</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;  <span class="keywordflow">return</span> {std::forward&lt;T&gt;(x)};</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;}</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="classmitama_1_1in__place__ok__t.html">  503</a></span>&#160;<span class="keyword">class </span><a class="code" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;{</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;};</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno"><a class="line" href="group__Modules.html#gaf58386f8ccc9b356dabcb65066052756">  510</a></span>&#160;<span class="keyword">inline</span> constexpr <a class="code" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a> <a class="code" href="group__Modules.html#gaf58386f8ccc9b356dabcb65066052756">in_place_ok</a> = {};</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno"><a class="line" href="classmitama_1_1in__place__err__t.html">  515</a></span>&#160;<span class="keyword">class </span><a class="code" href="classmitama_1_1in__place__err__t.html">in_place_err_t</a></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;{</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;};</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno"><a class="line" href="group__Modules.html#ga0b85336206d67e37d22ce3da9a9f4a8f">  522</a></span>&#160;<span class="keyword">inline</span> constexpr <a class="code" href="classmitama_1_1in__place__err__t.html">in_place_err_t</a> <a class="code" href="group__Modules.html#ga0b85336206d67e37d22ce3da9a9f4a8f">in_place_err</a> = {};</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> E&gt;</div><div class="line"><a name="l00530"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html">  530</a></span>&#160;<span class="keyword">class </span><a class="code" href="classmitama_1_1Result.html">Result</a></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;{</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>, <span class="keyword">class</span>&gt;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;  <span class="keyword">friend</span> <span class="keyword">struct </span>result::ok_trait_injector;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>, <span class="keyword">class</span>&gt;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;  <span class="keyword">friend</span> <span class="keyword">struct </span>result::err_trait_injector;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>, <span class="keyword">class</span>&gt;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;  <span class="keyword">friend</span> <span class="keyword">struct </span>result::ok_err_trait_injector;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;  std::variant&lt;Ok&lt;T&gt;, <a class="code" href="classmitama_1_1Err.html">Err&lt;E&gt;</a>&gt; storage_;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Requiers&gt;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  <span class="keyword">using</span> where = std::enable_if_t&lt;std::conjunction_v&lt;Requiers...&gt;, std::nullptr_t&gt;;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;  <span class="keyword">static</span> constexpr std::nullptr_t required = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T_, <span class="keyword">class</span> E_&gt;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;  <span class="keyword">using</span> not_self = std::negation&lt;std::is_same&lt;Result, Result&lt;T_, E_&gt;&gt;&gt;;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00550"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a9199dd0837f4ec69d51ddf26cc5a0c45">  550</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classmitama_1_1Result.html#a9199dd0837f4ec69d51ddf26cc5a0c45">ok_type</a> = T;  </div><div class="line"><a name="l00551"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a8a89c986e309f6ab5f15872e8bfc91f8">  551</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classmitama_1_1Result.html#a8a89c986e309f6ab5f15872e8bfc91f8">err_type</a> = E; </div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;  constexpr <a class="code" href="classmitama_1_1Result.html#a276134207694d2ef1f51ae19880f43a2">Result</a>() noexcept = delete;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  constexpr <a class="code" href="classmitama_1_1Result.html">Result</a>(const <a class="code" href="classmitama_1_1Result.html">Result</a>&amp; rhs);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;  constexpr <a class="code" href="classmitama_1_1Result.html">Result</a>(<a class="code" href="classmitama_1_1Result.html">Result</a> &amp;&amp;rhs);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  template &lt;class U&gt;</div><div class="line"><a name="l00587"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#adbe8630f4bcb322e5483a45b41fb7be1">  587</a></span>&#160;  <a class="code" href="classmitama_1_1Result.html">Result</a>(<a class="code" href="classmitama_1_1Ok.html">Ok</a>&lt;U&gt; const &amp;<a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;      : storage_(std::in_place_type&lt;<a class="code" href="classmitama_1_1Ok.html">Ok</a>&lt;T&gt;&gt;, <a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>)</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  {</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;  }</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00601"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#adbe8630f4bcb322e5483a45b41fb7be1">  601</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Result.html#adbe8630f4bcb322e5483a45b41fb7be1">Result</a>(<a class="code" href="classmitama_1_1Ok.html">Ok&lt;U&gt;</a> <span class="keyword">const</span> &amp;<a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>)</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;      : storage_{std::in_place_type&lt;Ok&lt;T&gt;&gt;, <a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>.x}</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  {</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;  }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00615"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#ac5136126583dff49a654afb1ed0fba05">  615</a></span>&#160;  <a class="code" href="classmitama_1_1Result.html#ac5136126583dff49a654afb1ed0fba05">Result</a>(<a class="code" href="classmitama_1_1Ok.html">Ok&lt;U&gt;</a> &amp;&amp; <a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>)</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;      : storage_{std::in_place_type&lt;Ok&lt;T&gt;&gt;, <a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>.x}</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;  {</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;  }</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00629"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#ac5136126583dff49a654afb1ed0fba05">  629</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Result.html#ac5136126583dff49a654afb1ed0fba05">Result</a>(<a class="code" href="classmitama_1_1Ok.html">Ok&lt;U&gt;</a> &amp;&amp; <a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>)</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;      : storage_{std::in_place_type&lt;Ok&lt;T&gt;&gt;, <a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>.x}</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;  {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  }</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00643"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#ac1e47c8aba033a76f0f5683bd97efc6f">  643</a></span>&#160;  <a class="code" href="classmitama_1_1Result.html#ac1e47c8aba033a76f0f5683bd97efc6f">Result</a>(<a class="code" href="classmitama_1_1Err.html">Err&lt;U&gt;</a> <span class="keyword">const</span> &amp;<a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>)</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;      : storage_{std::in_place_type&lt;Err&lt;E&gt;&gt;, <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>.x}</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;  {</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;  }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00657"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#ac1e47c8aba033a76f0f5683bd97efc6f">  657</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Result.html#ac1e47c8aba033a76f0f5683bd97efc6f">Result</a>(<a class="code" href="classmitama_1_1Err.html">Err&lt;U&gt;</a> <span class="keyword">const</span> &amp;<a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>)</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;      : storage_{std::in_place_type&lt;Err&lt;E&gt;&gt;, <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>.x}</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;  {</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;  }</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00671"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#acabba586680d639eaa37cfa334a6d08b">  671</a></span>&#160;  <a class="code" href="classmitama_1_1Result.html#acabba586680d639eaa37cfa334a6d08b">Result</a>(<a class="code" href="classmitama_1_1Err.html">Err&lt;U&gt;</a> &amp;&amp; <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>)</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;      : storage_{std::in_place_type&lt;Err&lt;E&gt;&gt;, <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>.x}</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;  {</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;  }</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00685"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#acabba586680d639eaa37cfa334a6d08b">  685</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Result.html#acabba586680d639eaa37cfa334a6d08b">Result</a>(<a class="code" href="classmitama_1_1Err.html">Err&lt;U&gt;</a> &amp;&amp; <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>)</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;      : storage_{std::in_place_type&lt;Err&lt;E&gt;&gt;, <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>.x}</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;  {</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;  }</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00704"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#ab505b0fdee11fdda752f6739825d0ee1">  704</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Result.html#ab505b0fdee11fdda752f6739825d0ee1">Result</a>(<a class="code" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a>, Args &amp;&amp; ... args)</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;  {</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    construct_ok(std::forward&lt;Args&gt;(args)...);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;  }</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00723"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a9ba3d8d21bac96693800a7b8a744f040">  723</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Result.html#a9ba3d8d21bac96693800a7b8a744f040">Result</a>(<a class="code" href="classmitama_1_1in__place__err__t.html">in_place_err_t</a>, Args &amp;&amp; ... args)</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;  {</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    construct_err(std::forward&lt;Args&gt;(args)...);</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;  }</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class </span>U, <span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00742"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a5c5b714a99a8998f0182a84cd0c03d17">  742</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Result.html#a5c5b714a99a8998f0182a84cd0c03d17">Result</a>(<a class="code" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a>, std::initializer_list&lt;U&gt; il, Args &amp;&amp;... args)</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;      : storage_{std::in_place_type&lt;Ok&lt;T&gt;&gt;, il, std::forward&lt;Args&gt;(args)...}</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;  {</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;  }</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class </span>U, <span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00761"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a5c5b714a99a8998f0182a84cd0c03d17">  761</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classmitama_1_1Result.html#a5c5b714a99a8998f0182a84cd0c03d17">Result</a>(<a class="code" href="classmitama_1_1in__place__ok__t.html">in_place_ok_t</a>, std::initializer_list&lt;U&gt; il, Args &amp;&amp;... args)</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;      : storage_{std::in_place_type&lt;Ok&lt;T&gt;&gt;, il, std::forward&lt;Args&gt;(args)...}</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;  {</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;  }</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">  779</a></span>&#160;  constexpr <span class="keywordtype">bool</span> <a class="code" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a>() const noexcept { <span class="keywordflow">return</span> std::holds_alternative&lt;Ok&lt;T&gt;&gt;(storage_); }</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">  794</a></span>&#160;  constexpr <span class="keywordtype">bool</span> <a class="code" href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">is_err</a>() const noexcept { <span class="keywordflow">return</span> std::holds_alternative&lt;Err&lt;E&gt;&gt;(storage_); }</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00811"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">  811</a></span>&#160;  constexpr std::optional&lt;T&gt; <a class="code" href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">ok</a>() const &amp;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;  {</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a>())</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    {</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;      <span class="keywordflow">return</span> std::optional&lt;T&gt;{std::get&lt;Ok&lt;T&gt;&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x};</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    }</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    {</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;      <span class="keywordflow">return</span> std::optional&lt;T&gt;{std::nullopt};</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    }</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;  }</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a39154f3c115ff133e2750f115a911c4b">  828</a></span>&#160;  constexpr std::optional&lt;T&gt; <a class="code" href="classmitama_1_1Result.html#a39154f3c115ff133e2750f115a911c4b">ok</a>() &amp;&amp;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;  {</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a>())</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    {</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;      <span class="keywordflow">return</span> std::optional&lt;T&gt;{std::get&lt;Ok&lt;T&gt;&gt;(std::move(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x};</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    }</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    {</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;      <span class="keywordflow">return</span> std::optional&lt;T&gt;{std::nullopt};</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    }</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;  }</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">  855</a></span>&#160;  constexpr std::optional&lt;E&gt; <a class="code" href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">err</a>() const &amp;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;  {</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">is_err</a>())</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    {</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;      <span class="keywordflow">return</span> std::optional&lt;E&gt;{std::get&lt;Err&lt;E&gt;&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x};</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    }</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    {</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;      <span class="keywordflow">return</span> std::optional&lt;E&gt;{std::nullopt};</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    }</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;  }</div><div class="line"><a name="l00871"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a9c9d99621b6a1fd42ca8225051c7eefc">  871</a></span>&#160;  constexpr std::optional&lt;E&gt; <a class="code" href="classmitama_1_1Result.html#a9c9d99621b6a1fd42ca8225051c7eefc">err</a>() &amp;&amp;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;  {</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">is_err</a>())</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    {</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;      <span class="keywordflow">return</span> std::optional&lt;E&gt;{std::get&lt;Err&lt;E&gt;&gt;(std::move(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x};</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    }</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    {</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;      <span class="keywordflow">return</span> std::optional&lt;E&gt;{std::nullopt};</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    }</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;  }</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l00903"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a73ec80af11f3a45db1c17135e23bf91c">  903</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a73ec80af11f3a45db1c17135e23bf91c">map</a>(O &amp;&amp;op) <span class="keyword">const</span> &amp; -&gt; std::enable_if_t&lt;std::is_invocable_v&lt;O, T&gt;,</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                                                         <a class="code" href="classmitama_1_1Result.html">Result&lt;std::invoke_result_t&lt;O, T&gt;</a>, E&gt;&gt;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;  {</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    <span class="keyword">using</span> result_type = <a class="code" href="classmitama_1_1Result.html">Result&lt;std::invoke_result_t&lt;O, T&gt;</a>, E&gt;;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a>()</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;               ? <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Ok.html">Ok</a>{std::forward&lt;O&gt;(op)(std::get&lt;<a class="code" href="classmitama_1_1Ok.html">Ok&lt;T&gt;</a>&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x)})</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;               : static_cast&lt;result_type&gt;(<a class="code" href="classmitama_1_1Err.html">Err</a>{std::get&lt;Err&lt;E&gt;&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x});</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;  }</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a73ec80af11f3a45db1c17135e23bf91c">map</a>(O &amp;&amp;op) &amp;&amp; -&gt; std::enable_if_t&lt;std::is_invocable_v&lt;O, T&gt;,</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                                                    <a class="code" href="classmitama_1_1Result.html">Result&lt;std::invoke_result_t&lt;O, T&gt;</a>, E&gt;&gt;</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;  {</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <span class="keyword">using</span> result_type = <a class="code" href="classmitama_1_1Result.html">Result&lt;std::invoke_result_t&lt;O, T&gt;</a>, E&gt;;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a>()</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;               ? <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Ok.html">Ok</a>{std::forward&lt;O&gt;(op)(std::get&lt;<a class="code" href="classmitama_1_1Ok.html">Ok&lt;T&gt;</a>&gt;(std::move(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x)})</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;               : static_cast&lt;result_type&gt;(Err{std::get&lt;Err&lt;E&gt;&gt;(std::move(<span class="keyword">static_cast&lt;</span>Result&lt;T, E&gt; *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x});</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;  }</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l00941"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a9fdd7a4b731485784fc734994cbcf700">  941</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a9fdd7a4b731485784fc734994cbcf700">map_err</a>(O &amp;&amp;op) <span class="keyword">const</span> &amp; -&gt; std::enable_if_t&lt;std::is_invocable_v&lt;O, E&gt;,</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                                                             <a class="code" href="classmitama_1_1Result.html">Result&lt;T, std::invoke_result_t&lt;O, E&gt;</a>&gt;&gt;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;  {</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <span class="keyword">using</span> result_type = <a class="code" href="classmitama_1_1Result.html">Result&lt;T, std::invoke_result_t&lt;O, E&gt;</a>&gt;;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">is_err</a>()</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;               ? <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Err.html">Err</a>{std::forward&lt;O&gt;(op)(std::get&lt;<a class="code" href="classmitama_1_1Err.html">Err&lt;E&gt;</a>&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x)})</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;               : static_cast&lt;result_type&gt;(<a class="code" href="classmitama_1_1Ok.html">Ok</a>{std::get&lt;Ok&lt;T&gt;&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x});</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;  }</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a9fdd7a4b731485784fc734994cbcf700">map_err</a>(O &amp;&amp;op) &amp;&amp; -&gt; std::enable_if_t&lt;std::is_invocable_v&lt;O, E&gt;,</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                                                        <a class="code" href="classmitama_1_1Result.html">Result&lt;T, std::invoke_result_t&lt;O, E&gt;</a>&gt;&gt;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;  {</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    <span class="keyword">using</span> result_type = <a class="code" href="classmitama_1_1Result.html">Result&lt;T, std::invoke_result_t&lt;O, E&gt;</a>&gt;;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">is_err</a>()</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;               ? <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Err.html">Err</a>{std::forward&lt;O&gt;(op)(std::get&lt;<a class="code" href="classmitama_1_1Err.html">Err&lt;E&gt;</a>&gt;(std::move(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x)})</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;               : static_cast&lt;result_type&gt;(Ok{std::get&lt;Ok&lt;T&gt;&gt;(std::move(<span class="keyword">static_cast&lt;</span>Result&lt;T, E&gt; *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x});</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;  }</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l00988"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#ae2f98b94748ee8e7577d5fe12a64a7b2">  988</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#ae2f98b94748ee8e7577d5fe12a64a7b2">operator&amp;&amp;</a>(<a class="code" href="classmitama_1_1Result.html">Result&lt;U, E&gt;</a> <span class="keyword">const</span> &amp;res) <span class="keyword">const</span> &amp; -&gt; <a class="code" href="classmitama_1_1Result.html">Result&lt;U, E&gt;</a></div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;  {</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    <span class="keyword">using</span> result_type = <a class="code" href="classmitama_1_1Result.html">Result&lt;U, E&gt;</a>;</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="keywordflow">return</span> this-&gt;<a class="code" href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">is_err</a>()</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;               ? <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Err.html">Err</a>{std::get&lt;Err&lt;E&gt;&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x})</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;               : res.is_err() ? <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Err.html">Err</a>{res.unwrap_err()})</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                              : static_cast&lt;result_type&gt;(<a class="code" href="classmitama_1_1Ok.html">Ok</a>{res.unwrap()});</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;  }</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l01017"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d"> 1017</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(O &amp;&amp;op) <span class="keyword">const</span> &amp; -&gt; std::enable_if_t&lt;is_result_v&lt;std::invoke_result_t&lt;O, T&gt;&gt;,</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;                                                              std::invoke_result_t&lt;O, T&gt;&gt;</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;  {</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    <span class="keyword">using</span> result_type = std::invoke_result_t&lt;O, T&gt;;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a>()</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;               ? std::forward&lt;O&gt;(op)(std::get&lt;<a class="code" href="classmitama_1_1Ok.html">Ok&lt;T&gt;</a>&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x)</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;               : <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Err.html">Err</a>{<span class="keyword">typename</span> result_type::err_type(std::get&lt;<a class="code" href="classmitama_1_1Err.html">Err&lt;E&gt;</a>&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x)});</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;  }</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">and_then</a>(O &amp;&amp;op) &amp;&amp; -&gt; std::enable_if_t&lt;is_result_v&lt;std::invoke_result_t&lt;O, T&gt;&gt;,</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;                                                         std::invoke_result_t&lt;O, T&gt;&gt;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;  {</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keyword">using</span> result_type = std::invoke_result_t&lt;O, T&gt;;</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a>()</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;               ? std::forward&lt;O&gt;(op)(std::get&lt;<a class="code" href="classmitama_1_1Ok.html">Ok&lt;T&gt;</a>&gt;(std::move(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x)</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;               : static_cast&lt;result_type&gt;(<a class="code" href="classmitama_1_1Err.html">Err</a>{<span class="keyword">typename</span> result_type::err_type(std::get&lt;<a class="code" href="classmitama_1_1Err.html">Err&lt;E&gt;</a>&gt;(std::move(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x)});</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;  }</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> F&gt;</div><div class="line"><a name="l01069"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a1f14132897491554f7996a89e9d2c779"> 1069</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a1f14132897491554f7996a89e9d2c779">operator||</a>(<a class="code" href="classmitama_1_1Result.html">Result&lt;T, F&gt;</a> <span class="keyword">const</span> &amp;res) <span class="keyword">const</span> &amp; -&gt; <a class="code" href="classmitama_1_1Result.html">Result&lt;T, F&gt;</a></div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;  {</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <span class="keyword">using</span> result_type = <a class="code" href="classmitama_1_1Result.html">Result&lt;T, F&gt;</a>;</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    <span class="keywordflow">return</span> this-&gt;is_ok()</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;               ? <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Ok.html">Ok</a>{std::get&lt;Ok&lt;T&gt;&gt;(storage_).x})</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;               : res.<a class="code" href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">is_ok</a>() ? <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Ok.html">Ok</a>{res.unwrap()})</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                             : static_cast&lt;result_type&gt;(<a class="code" href="classmitama_1_1Err.html">Err</a>{res.unwrap_err()});</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;  }</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l01098"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87"> 1098</a></span>&#160;  constexpr <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">or_else</a>(O &amp;&amp;op) <span class="keyword">const</span> &amp; -&gt; std::enable_if_t&lt;is_result_v&lt;std::invoke_result_t&lt;O, E&gt;&gt;,</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                                                             std::invoke_result_t&lt;O, E&gt;&gt;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;  {</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <span class="keyword">using</span> result_type = std::invoke_result_t&lt;O, E&gt;;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;is_err()</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;               ? std::forward&lt;O&gt;(op)(std::get&lt;<a class="code" href="classmitama_1_1Err.html">Err&lt;E&gt;</a>&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x)</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;               : <span class="keyword">static_cast&lt;</span>result_type<span class="keyword">&gt;</span>(<a class="code" href="classmitama_1_1Ok.html">Ok</a>{<span class="keyword">typename</span> result_type::ok_type(std::get&lt;<a class="code" href="classmitama_1_1Ok.html">Ok&lt;T&gt;</a>&gt;(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> <span class="keyword">const </span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_).x)});</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;  }</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;  constexpr <span class="keyword">auto</span> or_else(O &amp;&amp;op) &amp;&amp; -&gt; std::enable_if_t&lt;is_result_v&lt;std::invoke_result_t&lt;O, T&gt;&gt;,</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                                                        std::invoke_result_t&lt;O, T&gt;&gt;</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;  {</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    <span class="keyword">using</span> result_type = std::invoke_result_t&lt;O, T&gt;;</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;is_err()</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;               ? std::forward&lt;O&gt;(op)(std::get&lt;<a class="code" href="classmitama_1_1Err.html">Err&lt;E&gt;</a>&gt;(std::move(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x)</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;               : static_cast&lt;result_type&gt;(<a class="code" href="classmitama_1_1Ok.html">Ok</a>{<span class="keyword">typename</span> result_type::ok_type(std::get&lt;<a class="code" href="classmitama_1_1Ok.html">Ok&lt;T&gt;</a>&gt;(std::move(<span class="keyword">static_cast&lt;</span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;storage_)).x)});</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;  }</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;</div><div class="line"><a name="l01134"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a9791f0b27ce56b4bc766336bdfd6b8bd"> 1134</a></span>&#160;  T <a class="code" href="classmitama_1_1Result.html#a9791f0b27ce56b4bc766336bdfd6b8bd">unwrap_or</a>(T <span class="keyword">const</span> &amp;optb) <span class="keyword">const</span> noexcept</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;  {</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    <span class="keywordflow">return</span> is_ok() ? std::get&lt;Ok&lt;T&gt;&gt;(storage_).x : optb;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;  }</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> O&gt;</div><div class="line"><a name="l01152"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a4a495ed5522bab9f7a96d5ff889120e7"> 1152</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classmitama_1_1Result.html#a4a495ed5522bab9f7a96d5ff889120e7">unwrap_or_else</a>(O &amp;&amp;op) <span class="keyword">const</span> noexcept(std::is_nothrow_invocable_r_v&lt;T, O, E&gt;)</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;      -&gt; std::enable_if_t&lt;std::is_invocable_r_v&lt;T, O, E&gt;, T&gt;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;  {</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    <span class="keywordflow">return</span> is_ok() ? std::get&lt;Ok&lt;T&gt;&gt;(storage_).x : std::forward&lt;O&gt;(op)(std::get&lt;Err&lt;E&gt;&gt;(storage_).x);</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;  }</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;</div><div class="line"><a name="l01178"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a619561a099b0b53dfcf6b6c40c6c7fac"> 1178</a></span>&#160;  T <a class="code" href="classmitama_1_1Result.html#a619561a099b0b53dfcf6b6c40c6c7fac">unwrap</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    <span class="keywordflow">if</span> constexpr (trait::formattable&lt;E&gt;::value)</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    {</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;      <span class="keywordflow">return</span> is_ok()</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                 ? std::get&lt;Ok&lt;T&gt;&gt;(storage_).x</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;                 : PANIC(R<span class="stringliteral">&quot;(called `Result::unwrap() on an `Err` value: %1%)&quot;, std::get&lt;<a class="code" href="classmitama_1_1Err.html">Err&lt;E&gt;</a>&gt;(storage_).x);</span></div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;<span class="stringliteral">    </span><span class="keywordflow">else</span></div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    {</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;      <span class="keywordflow">return</span> is_ok()</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;                 ? std::get&lt;Ok&lt;T&gt;&gt;(storage_).x</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;                 : PANIC(R<span class="stringliteral">&quot;(called `Result::unwrap() on an `Err`)&quot;);</span></div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="stringliteral">  }</span></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l01215"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a13e93b48e2105f8def32e1eca7d9291e"> 1215</a></span>&#160;<span class="stringliteral">  E <a class="code" href="classmitama_1_1Result.html#a13e93b48e2105f8def32e1eca7d9291e">unwrap_err</a>()</span><span class="keyword"> const</span></div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    <span class="keywordflow">if</span> constexpr (trait::formattable&lt;T&gt;::value)</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    {</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;      <span class="keywordflow">return</span> is_err()</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                 ? std::get&lt;Err&lt;E&gt;&gt;(storage_).x</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;                 : PANIC(R<span class="stringliteral">&quot;(called `Result::unwrap_err() on an `Ok` value: %1%)&quot;, std::get&lt;<a class="code" href="classmitama_1_1Ok.html">Ok&lt;T&gt;</a>&gt;(storage_).x);</span></div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="stringliteral">    </span><span class="keywordflow">else</span></div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    {</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;      <span class="keywordflow">return</span> is_err()</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;                 ? std::get&lt;Err&lt;E&gt;&gt;(storage_).x</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                 : PANIC(R<span class="stringliteral">&quot;(called `Result::unwrap_err() on an `Ok` value)&quot;);</span></div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="stringliteral">  }</span></div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l01247"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#aead64317d04a8ba8734237be9fbd8829"> 1247</a></span>&#160;<span class="stringliteral">  T <a class="code" href="classmitama_1_1Result.html#aead64317d04a8ba8734237be9fbd8829">unwrap_or_default</a>() const &amp;</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<span class="stringliteral">  {</span></div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;<span class="stringliteral">    </span><span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;is_ok()</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;               ? <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="classmitama_1_1Result.html">Result&lt;T, E&gt;</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;unwrap()</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;               : T{};</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;  }</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U, <span class="keyword">class</span> F&gt;</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;  <span class="keywordtype">bool</span></div><div class="line"><a name="l01261"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a11981c6ceb7f578132388a2f895ace45"> 1261</a></span>&#160;  <a class="code" href="classmitama_1_1Result.html#a11981c6ceb7f578132388a2f895ace45">operator==</a>(<a class="code" href="classmitama_1_1Result.html">Result&lt;U, F&gt;</a> <span class="keyword">const</span> &amp;rhs) <span class="keyword">const</span> &amp;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;  {</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    <span class="keywordflow">return</span> std::visit(::mitama::make_overload(</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;                          [](<a class="code" href="classmitama_1_1Ok.html">Ok&lt;T&gt;</a> <span class="keyword">const</span> &amp;l, <a class="code" href="classmitama_1_1Ok.html">Ok&lt;U&gt;</a> <span class="keyword">const</span> &amp;r) { <span class="keywordflow">return</span> l.x == r.x; },</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;                          [](<a class="code" href="classmitama_1_1Err.html">Err&lt;E&gt;</a> <span class="keyword">const</span> &amp;l, <a class="code" href="classmitama_1_1Err.html">Err&lt;F&gt;</a> <span class="keyword">const</span> &amp;r) { <span class="keywordflow">return</span> l.x == r.x; },</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;                          [](<span class="keyword">auto</span> &amp;&amp;...) { <span class="keywordflow">return</span> <span class="keyword">false</span>; }),</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;                      this-&gt;storage_, rhs.storage_);</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;  }</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> U&gt;</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;  <span class="keywordtype">bool</span></div><div class="line"><a name="l01278"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a265995257696a3e81bf80f7eca733a0a"> 1278</a></span>&#160;  <a class="code" href="classmitama_1_1Result.html#a265995257696a3e81bf80f7eca733a0a">operator==</a>(<a class="code" href="classmitama_1_1Ok.html">Ok&lt;U&gt;</a> <span class="keyword">const</span> &amp;rhs)<span class="keyword"> const</span></div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <span class="keywordflow">return</span> this-&gt;is_ok() ? this-&gt;unwrap() == rhs.x : <span class="keyword">false</span>;</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;  }</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> F&gt;</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;  <span class="keywordtype">bool</span></div><div class="line"><a name="l01291"></a><span class="lineno"><a class="line" href="classmitama_1_1Result.html#a6e41d8a7c51531949d8604fa451aa06f"> 1291</a></span>&#160;  <a class="code" href="classmitama_1_1Result.html#a6e41d8a7c51531949d8604fa451aa06f">operator==</a>(<a class="code" href="classmitama_1_1Err.html">Err&lt;F&gt;</a> <span class="keyword">const</span> &amp;rhs)<span class="keyword"> const</span></div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    <span class="keywordflow">return</span> this-&gt;is_err() ? this-&gt;unwrap_err() == rhs.x : <span class="keyword">false</span>;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;  }</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;};</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160; <span class="comment">// end of Result</span></div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;} <span class="comment">// namespace mitama</span></div><div class="ttc" id="classmitama_1_1Ok_html_a1711480b52476a6e6dfd01beafdde58e"><div class="ttname"><a href="classmitama_1_1Ok.html#a1711480b52476a6e6dfd01beafdde58e">mitama::Ok::operator==</a></div><div class="ttdeci">bool operator==(Err&lt; E_ &gt; const &amp;) const</div><div class="ttdoc">operator== for Ok and Err</div><div class="ttdef"><b>Definition:</b> Result.hpp:270</div></div>
<div class="ttc" id="classmitama_1_1Err_html_af13923664f23e33efdc7e8b9ddb7fb61"><div class="ttname"><a href="classmitama_1_1Err.html#af13923664f23e33efdc7e8b9ddb7fb61">mitama::Err::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const Err &amp;err)</div><div class="ttdoc">friend operator&lt;&lt; that adapt to ostream</div><div class="ttdef"><b>Definition:</b> Result.hpp:483</div></div>
<div class="ttc" id="group__Modules_html_gaf58386f8ccc9b356dabcb65066052756"><div class="ttname"><a href="group__Modules.html#gaf58386f8ccc9b356dabcb65066052756">mitama::in_place_ok</a></div><div class="ttdeci">constexpr in_place_ok_t in_place_ok</div><div class="ttdoc">tag variable for Result in-place constructor.</div><div class="ttdef"><b>Definition:</b> Result.hpp:510</div></div>
<div class="ttc" id="classmitama_1_1Result_html_aead64317d04a8ba8734237be9fbd8829"><div class="ttname"><a href="classmitama_1_1Result.html#aead64317d04a8ba8734237be9fbd8829">mitama::Result::unwrap_or_default</a></div><div class="ttdeci">T unwrap_or_default() const &amp;</div><div class="ttdoc">Unwraps a result, yielding the content of an Err.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1247</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a5918499b796baa86637089606fd41212"><div class="ttname"><a href="classmitama_1_1Result.html#a5918499b796baa86637089606fd41212">mitama::Result::is_err</a></div><div class="ttdeci">constexpr bool is_err() const noexcept</div><div class="ttdoc">Returns true if the result is Err.</div><div class="ttdef"><b>Definition:</b> Result.hpp:794</div></div>
<div class="ttc" id="structmitama_1_1is__ok__type_html"><div class="ttname"><a href="structmitama_1_1is__ok__type.html">mitama::is_ok_type</a></div><div class="ttdoc">meta-function that detect type is mitama::Ok</div><div class="ttdef"><b>Definition:</b> Result.hpp:92</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a57a9bc88ce42d6821379857164f8343e"><div class="ttname"><a href="classmitama_1_1Ok.html#a57a9bc88ce42d6821379857164f8343e">mitama::Ok::unwrap_or_else</a></div><div class="ttdeci">T unwrap_or_else(O &amp;&amp;) const noexcept</div><div class="ttdoc">Return x if has ok value, otherwise apply operator.</div><div class="ttdef"><b>Definition:</b> Result.hpp:241</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a1110646673cb0f97a5596d57296c4e28"><div class="ttname"><a href="classmitama_1_1Ok.html#a1110646673cb0f97a5596d57296c4e28">mitama::Ok::or_else</a></div><div class="ttdeci">constexpr auto or_else(Op &amp;&amp;) noexcept</div><div class="ttdoc">If has err value apply operator.</div><div class="ttdef"><b>Definition:</b> Result.hpp:230</div></div>
<div class="ttc" id="classmitama_1_1Err_html_ad95e90ed3c432a60966e20a00f59f432"><div class="ttname"><a href="classmitama_1_1Err.html#ad95e90ed3c432a60966e20a00f59f432">mitama::Err::or_else</a></div><div class="ttdeci">constexpr auto or_else(Op &amp;&amp;op) -&gt; std::enable_if_t&lt; is_result_v&lt; std::invoke_result_t&lt; Op, E &gt;&gt;, std::invoke_result_t&lt; Op, E &gt;&gt;</div><div class="ttdoc">If has err value apply operator.</div><div class="ttdef"><b>Definition:</b> Result.hpp:437</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a89cb41e5f09c22344d442886c92a3284"><div class="ttname"><a href="classmitama_1_1Ok.html#a89cb41e5f09c22344d442886c92a3284">mitama::Ok::Ok</a></div><div class="ttdeci">constexpr Ok(U &amp;&amp;u) noexcept(std::is_nothrow_constructible_v&lt; T, U &gt;)</div><div class="ttdoc">non-explicit generic constructor  Initializes the contained variant as if direct-non-list-initializin...</div><div class="ttdef"><b>Definition:</b> Result.hpp:132</div></div>
<div class="ttc" id="namespacemitama_html"><div class="ttname"><a href="namespacemitama.html">mitama</a></div><div class="ttdef"><b>Definition:</b> Result.hpp:29</div></div>
<div class="ttc" id="classmitama_1_1Err_html_a484e75002a5f7b15991300713b71660c"><div class="ttname"><a href="classmitama_1_1Err.html#a484e75002a5f7b15991300713b71660c">mitama::Err::Err</a></div><div class="ttdeci">Err()=default</div><div class="ttdoc">default constructor</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_af48a3b6577f93520461225c2e47bb0b6"><div class="ttname"><a href="classmitama_1_1Ok.html#af48a3b6577f93520461225c2e47bb0b6">mitama::Ok::Ok</a></div><div class="ttdeci">constexpr Ok(Ok&lt; U &gt; &amp;&amp;t) noexcept(std::is_nothrow_constructible_v&lt; T, U &gt;)</div><div class="ttdoc">non-explicit move constructor tempalte for Ok</div><div class="ttdef"><b>Definition:</b> Result.hpp:173</div></div>
<div class="ttc" id="classmitama_1_1Err_html_a45d53378b5ac5a37085c6814dd2fec29"><div class="ttname"><a href="classmitama_1_1Err.html#a45d53378b5ac5a37085c6814dd2fec29">mitama::Err::err_type</a></div><div class="ttdeci">E err_type</div><div class="ttdoc">dependent type</div><div class="ttdef"><b>Definition:</b> Result.hpp:301</div></div>
<div class="ttc" id="classmitama_1_1Err_html_a53d02248b1465846813f662c53c33303"><div class="ttname"><a href="classmitama_1_1Err.html#a53d02248b1465846813f662c53c33303">mitama::Err::Err</a></div><div class="ttdeci">Err(U &amp;&amp;u) noexcept(std::is_nothrow_constructible_v&lt; E, U &gt;)</div><div class="ttdoc">non-explicit generic constructor</div><div class="ttdef"><b>Definition:</b> Result.hpp:322</div></div>
<div class="ttc" id="classmitama_1_1Result_html_ab505b0fdee11fdda752f6739825d0ee1"><div class="ttname"><a href="classmitama_1_1Result.html#ab505b0fdee11fdda752f6739825d0ee1">mitama::Result::Result</a></div><div class="ttdeci">Result(in_place_ok_t, Args &amp;&amp;... args)</div><div class="ttdoc">constructor for ok value</div><div class="ttdef"><b>Definition:</b> Result.hpp:704</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_afdfadaecb84a0fb144eb9b8b2c0ee2e4"><div class="ttname"><a href="classmitama_1_1Ok.html#afdfadaecb84a0fb144eb9b8b2c0ee2e4">mitama::Ok::operator==</a></div><div class="ttdeci">bool operator==(Result&lt; T_, E_ &gt; const &amp;rhs) const</div><div class="ttdoc">operator== for Ok and Result</div><div class="ttdef"><b>Definition:</b> Result.hpp:251</div></div>
<div class="ttc" id="classmitama_1_1Err_html_a602ba574f115f8e31a6e8e0bffbeaeb2"><div class="ttname"><a href="classmitama_1_1Err.html#a602ba574f115f8e31a6e8e0bffbeaeb2">mitama::Err::Err</a></div><div class="ttdeci">constexpr Err(std::in_place_t, Args &amp;&amp;... args) noexcept(std::is_nothrow_constructible_v&lt; E, Args... &gt;)</div><div class="ttdoc">in-place constructor</div><div class="ttdef"><b>Definition:</b> Result.hpp:403</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a9fdd7a4b731485784fc734994cbcf700"><div class="ttname"><a href="classmitama_1_1Result.html#a9fdd7a4b731485784fc734994cbcf700">mitama::Result::map_err</a></div><div class="ttdeci">constexpr auto map_err(O &amp;&amp;op) const &amp;-&gt; std::enable_if_t&lt; std::is_invocable_v&lt; O, E &gt;, Result&lt; T, std::invoke_result_t&lt; O, E &gt;&gt;&gt;</div><div class="ttdoc">Maps a Result&lt;T, E&gt; to Result&lt;T, F&gt; by applying a function to a contained Err value,...</div><div class="ttdef"><b>Definition:</b> Result.hpp:941</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a6e41d8a7c51531949d8604fa451aa06f"><div class="ttname"><a href="classmitama_1_1Result.html#a6e41d8a7c51531949d8604fa451aa06f">mitama::Result::operator==</a></div><div class="ttdeci">bool operator==(Err&lt; F &gt; const &amp;rhs) const</div><div class="ttdoc">Operator== for Result&lt;T, E&gt; and Err&lt;F&gt;.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1291</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a7b8010b01f6dc19ec147d68b3aba7f5b"><div class="ttname"><a href="classmitama_1_1Result.html#a7b8010b01f6dc19ec147d68b3aba7f5b">mitama::Result::err</a></div><div class="ttdeci">constexpr std::optional&lt; E &gt; err() const &amp;</div><div class="ttdoc">Converts from Result&lt;T, E&gt; to std::optional&lt;E&gt;.</div><div class="ttdef"><b>Definition:</b> Result.hpp:855</div></div>
<div class="ttc" id="classmitama_1_1Result_html_acabba586680d639eaa37cfa334a6d08b"><div class="ttname"><a href="classmitama_1_1Result.html#acabba586680d639eaa37cfa334a6d08b">mitama::Result::Result</a></div><div class="ttdeci">Result(Err&lt; U &gt; &amp;&amp;err)</div><div class="ttdoc">constructor for Err&amp;&amp;</div><div class="ttdef"><b>Definition:</b> Result.hpp:671</div></div>
<div class="ttc" id="classmitama_1_1Err_html_abbd4aa6daa0fa9f8d01babd24a47d76a"><div class="ttname"><a href="classmitama_1_1Err.html#abbd4aa6daa0fa9f8d01babd24a47d76a">mitama::Err::and_then</a></div><div class="ttdeci">constexpr auto and_then(Op &amp;&amp;)</div><div class="ttdoc">If has ok value apply operator op.</div><div class="ttdef"><b>Definition:</b> Result.hpp:426</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a4a495ed5522bab9f7a96d5ff889120e7"><div class="ttname"><a href="classmitama_1_1Result.html#a4a495ed5522bab9f7a96d5ff889120e7">mitama::Result::unwrap_or_else</a></div><div class="ttdeci">auto unwrap_or_else(O &amp;&amp;op) const noexcept(std::is_nothrow_invocable_r_v&lt; T, O, E &gt;) -&gt; std::enable_if_t&lt; std::is_invocable_r_v&lt; T, O, E &gt;, T &gt;</div><div class="ttdoc">Unwraps a result, yielding the content of an Ok. If the value is an Err then it calls op with its val...</div><div class="ttdef"><b>Definition:</b> Result.hpp:1152</div></div>
<div class="ttc" id="group__Modules_html_ga0b85336206d67e37d22ce3da9a9f4a8f"><div class="ttname"><a href="group__Modules.html#ga0b85336206d67e37d22ce3da9a9f4a8f">mitama::in_place_err</a></div><div class="ttdeci">constexpr in_place_err_t in_place_err</div><div class="ttdoc">tag variable for Result in-place constructor.</div><div class="ttdef"><b>Definition:</b> Result.hpp:522</div></div>
<div class="ttc" id="structmitama_1_1is__result_html"><div class="ttname"><a href="structmitama_1_1is__result.html">mitama::is_result</a></div><div class="ttdoc">meta-function that detect type is mitama::Result</div><div class="ttdef"><b>Definition:</b> Result.hpp:64</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a265995257696a3e81bf80f7eca733a0a"><div class="ttname"><a href="classmitama_1_1Result.html#a265995257696a3e81bf80f7eca733a0a">mitama::Result::operator==</a></div><div class="ttdeci">bool operator==(Ok&lt; U &gt; const &amp;rhs) const</div><div class="ttdoc">Operator== for Result and Ok.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1278</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a445eabde6500cc7d7e2e5d12a7c6f161"><div class="ttname"><a href="classmitama_1_1Ok.html#a445eabde6500cc7d7e2e5d12a7c6f161">mitama::Ok::ok_type</a></div><div class="ttdeci">T ok_type</div><div class="ttdoc">dependent type</div><div class="ttdef"><b>Definition:</b> Result.hpp:116</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a619561a099b0b53dfcf6b6c40c6c7fac"><div class="ttname"><a href="classmitama_1_1Result.html#a619561a099b0b53dfcf6b6c40c6c7fac">mitama::Result::unwrap</a></div><div class="ttdeci">T unwrap() const</div><div class="ttdoc">Unwraps a result, yielding the content of an Ok.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1178</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a1d2e601e7dc743326a6f557105a90f14"><div class="ttname"><a href="classmitama_1_1Ok.html#a1d2e601e7dc743326a6f557105a90f14">mitama::Ok::and_then</a></div><div class="ttdeci">constexpr auto and_then(Op &amp;&amp;op) noexcept(noexcept(std::declval&lt; Op &gt;()(std::declval&lt; T &amp;&gt;()))) -&gt; std::enable_if_t&lt; is_result_v&lt; std::invoke_result_t&lt; Op, T &gt;&gt;, std::invoke_result_t&lt; Op, T &gt;&gt;</div><div class="ttdoc">If has ok value apply operator op.</div><div class="ttdef"><b>Definition:</b> Result.hpp:217</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a8a89c986e309f6ab5f15872e8bfc91f8"><div class="ttname"><a href="classmitama_1_1Result.html#a8a89c986e309f6ab5f15872e8bfc91f8">mitama::Result::err_type</a></div><div class="ttdeci">E err_type</div><div class="ttdoc">dependent type</div><div class="ttdef"><b>Definition:</b> Result.hpp:551</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a5c5b714a99a8998f0182a84cd0c03d17"><div class="ttname"><a href="classmitama_1_1Result.html#a5c5b714a99a8998f0182a84cd0c03d17">mitama::Result::Result</a></div><div class="ttdeci">Result(in_place_ok_t, std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</div><div class="ttdoc">constructor for ok value</div><div class="ttdef"><b>Definition:</b> Result.hpp:742</div></div>
<div class="ttc" id="classmitama_1_1Result_html_adbe8630f4bcb322e5483a45b41fb7be1"><div class="ttname"><a href="classmitama_1_1Result.html#adbe8630f4bcb322e5483a45b41fb7be1">mitama::Result::Result</a></div><div class="ttdeci">Result(Ok&lt; U &gt; const &amp;ok)</div><div class="ttdoc">constructor for Ok const&amp;</div><div class="ttdef"><b>Definition:</b> Result.hpp:601</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a35a8fa198d3ea688dc0b7caba910d895"><div class="ttname"><a href="classmitama_1_1Ok.html#a35a8fa198d3ea688dc0b7caba910d895">mitama::Ok::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const Ok &amp;ok)</div><div class="ttdoc">friend operator&lt;&lt; that adapt to ostream</div><div class="ttdef"><b>Definition:</b> Result.hpp:283</div></div>
<div class="ttc" id="classmitama_1_1Err_html_a2ea24b1f10f356230fd2e90f20f3ae8f"><div class="ttname"><a href="classmitama_1_1Err.html#a2ea24b1f10f356230fd2e90f20f3ae8f">mitama::Err::Err</a></div><div class="ttdeci">constexpr Err(const Err&lt; U &gt; &amp;t) noexcept(std::is_nothrow_constructible_v&lt; E, U &gt;)</div><div class="ttdoc">explicit generic copy constructor</div><div class="ttdef"><b>Definition:</b> Result.hpp:364</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a9c9d99621b6a1fd42ca8225051c7eefc"><div class="ttname"><a href="classmitama_1_1Result.html#a9c9d99621b6a1fd42ca8225051c7eefc">mitama::Result::err</a></div><div class="ttdeci">constexpr std::optional&lt; E &gt; err() &amp;&amp;</div><div class="ttdoc">Converts from Result&lt;T, E&gt; to std::optional&lt;E&gt;.</div><div class="ttdef"><b>Definition:</b> Result.hpp:871</div></div>
<div class="ttc" id="classmitama_1_1Ok_html"><div class="ttname"><a href="classmitama_1_1Ok.html">mitama::Ok</a></div><div class="ttdoc">Ok stat generator class.</div><div class="ttdef"><b>Definition:</b> Result.hpp:112</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a9791f0b27ce56b4bc766336bdfd6b8bd"><div class="ttname"><a href="classmitama_1_1Result.html#a9791f0b27ce56b4bc766336bdfd6b8bd">mitama::Result::unwrap_or</a></div><div class="ttdeci">T unwrap_or(T const &amp;optb) const noexcept</div><div class="ttdoc">Unwraps a result, yielding the content of an Ok. Else, it returns optb.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1134</div></div>
<div class="ttc" id="classmitama_1_1Err_html_a3c6f3a19f41c7fddc5f5413d2c7f0cb6"><div class="ttname"><a href="classmitama_1_1Err.html#a3c6f3a19f41c7fddc5f5413d2c7f0cb6">mitama::Err::Err</a></div><div class="ttdeci">constexpr Err(Err&lt; U &gt; &amp;&amp;t) noexcept(std::is_nothrow_constructible_v&lt; E, U &gt;)</div><div class="ttdoc">non-explicit generic move constructor</div><div class="ttdef"><b>Definition:</b> Result.hpp:377</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a1f14132897491554f7996a89e9d2c779"><div class="ttname"><a href="classmitama_1_1Result.html#a1f14132897491554f7996a89e9d2c779">mitama::Result::operator||</a></div><div class="ttdeci">constexpr auto operator||(Result&lt; T, F &gt; const &amp;res) const &amp;-&gt; Result&lt; T, F &gt;</div><div class="ttdoc">Returns res if the result is Err, otherwise returns the Ok value of self.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1069</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a73ec80af11f3a45db1c17135e23bf91c"><div class="ttname"><a href="classmitama_1_1Result.html#a73ec80af11f3a45db1c17135e23bf91c">mitama::Result::map</a></div><div class="ttdeci">constexpr auto map(O &amp;&amp;op) const &amp;-&gt; std::enable_if_t&lt; std::is_invocable_v&lt; O, T &gt;, Result&lt; std::invoke_result_t&lt; O, T &gt;, E &gt;&gt;</div><div class="ttdoc">Maps a Result&lt;T, E&gt; to Result&lt;U, E&gt; by applying a function to a contained Ok value,...</div><div class="ttdef"><b>Definition:</b> Result.hpp:903</div></div>
<div class="ttc" id="classmitama_1_1Err_html_a486bdfecd91c87f6a3b61e848794f1eb"><div class="ttname"><a href="classmitama_1_1Err.html#a486bdfecd91c87f6a3b61e848794f1eb">mitama::Err::unwrap_or_else</a></div><div class="ttdeci">auto unwrap_or_else(O &amp;&amp;op) const noexcept</div><div class="ttdoc">Return x if has ok value, otherwise apply operator.</div><div class="ttdef"><b>Definition:</b> Result.hpp:450</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a9199dd0837f4ec69d51ddf26cc5a0c45"><div class="ttname"><a href="classmitama_1_1Result.html#a9199dd0837f4ec69d51ddf26cc5a0c45">mitama::Result::ok_type</a></div><div class="ttdeci">T ok_type</div><div class="ttdoc">dependent type</div><div class="ttdef"><b>Definition:</b> Result.hpp:550</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a4a40374d9be86d5092f88df445756b87"><div class="ttname"><a href="classmitama_1_1Result.html#a4a40374d9be86d5092f88df445756b87">mitama::Result::or_else</a></div><div class="ttdeci">constexpr auto or_else(O &amp;&amp;op) const &amp;-&gt; std::enable_if_t&lt; is_result_v&lt; std::invoke_result_t&lt; O, E &gt;&gt;, std::invoke_result_t&lt; O, E &gt;&gt;</div><div class="ttdoc">Calls op if the result is Err, otherwise returns the Ok value of self.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1098</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a39154f3c115ff133e2750f115a911c4b"><div class="ttname"><a href="classmitama_1_1Result.html#a39154f3c115ff133e2750f115a911c4b">mitama::Result::ok</a></div><div class="ttdeci">constexpr std::optional&lt; T &gt; ok() &amp;&amp;</div><div class="ttdoc">Converts from Result&lt;T, E&gt; to std::optional&lt;T&gt;.</div><div class="ttdef"><b>Definition:</b> Result.hpp:828</div></div>
<div class="ttc" id="classmitama_1_1Err_html_aa8e86c0ff44addc499eacf1777907c69"><div class="ttname"><a href="classmitama_1_1Err.html#aa8e86c0ff44addc499eacf1777907c69">mitama::Err::Err</a></div><div class="ttdeci">constexpr Err(const Err&lt; U &gt; &amp;t) noexcept(std::is_nothrow_constructible_v&lt; E, U &gt;)</div><div class="ttdoc">non-explicit generic copy constructor</div><div class="ttdef"><b>Definition:</b> Result.hpp:351</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a6248b52809006a89ab59f3b43fbaf155"><div class="ttname"><a href="classmitama_1_1Ok.html#a6248b52809006a89ab59f3b43fbaf155">mitama::Ok::is_err</a></div><div class="ttdeci">constexpr std::false_type is_err() const noexcept</div><div class="ttdoc">has err value?</div><div class="ttdef"><b>Definition:</b> Result.hpp:209</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a0e8bfe3d3978d48d47ad6c6e66dbad30"><div class="ttname"><a href="classmitama_1_1Ok.html#a0e8bfe3d3978d48d47ad6c6e66dbad30">mitama::Ok::Ok</a></div><div class="ttdeci">constexpr Ok(std::in_place_t, Args &amp;&amp;... args) noexcept(std::is_nothrow_constructible_v&lt; T, Args... &gt;)</div><div class="ttdoc">in-place constructor  Initializes the contained variant as if direct-non-list-initializing an object ...</div><div class="ttdef"><b>Definition:</b> Result.hpp:194</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a9ba3d8d21bac96693800a7b8a744f040"><div class="ttname"><a href="classmitama_1_1Result.html#a9ba3d8d21bac96693800a7b8a744f040">mitama::Result::Result</a></div><div class="ttdeci">Result(in_place_err_t, Args &amp;&amp;... args)</div><div class="ttdoc">constructor for ok value</div><div class="ttdef"><b>Definition:</b> Result.hpp:723</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a2ced75f08cb99f89f4a13c4b2c1f09ca"><div class="ttname"><a href="classmitama_1_1Ok.html#a2ced75f08cb99f89f4a13c4b2c1f09ca">mitama::Ok::Ok</a></div><div class="ttdeci">constexpr Ok(const Ok&lt; U &gt; &amp;t) noexcept(std::is_nothrow_constructible_v&lt; T, U &gt;)</div><div class="ttdoc">non-explicit constructor for Ok  Initializes the contained variant as if direct-non-list-initializing...</div><div class="ttdef"><b>Definition:</b> Result.hpp:152</div></div>
<div class="ttc" id="classmitama_1_1Result_html_ae2f98b94748ee8e7577d5fe12a64a7b2"><div class="ttname"><a href="classmitama_1_1Result.html#ae2f98b94748ee8e7577d5fe12a64a7b2">mitama::Result::operator &amp;&amp;</a></div><div class="ttdeci">constexpr auto operator &amp;&amp;(Result&lt; U, E &gt; const &amp;res) const &amp;-&gt; Result&lt; U, E &gt;</div><div class="ttdoc">Returns res if the result is Ok, otherwise returns the Err value of self.</div><div class="ttdef"><b>Definition:</b> Result.hpp:988</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a11981c6ceb7f578132388a2f895ace45"><div class="ttname"><a href="classmitama_1_1Result.html#a11981c6ceb7f578132388a2f895ace45">mitama::Result::operator==</a></div><div class="ttdeci">bool operator==(Result&lt; U, F &gt; const &amp;rhs) const &amp;</div><div class="ttdoc">Operator== for Result&lt;T, E&gt; and Result&lt;U, F&gt;.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1261</div></div>
<div class="ttc" id="classmitama_1_1Err_html_a575ea27a608c993b31910f76a0d03fbc"><div class="ttname"><a href="classmitama_1_1Err.html#a575ea27a608c993b31910f76a0d03fbc">mitama::Err::is_ok</a></div><div class="ttdeci">constexpr std::false_type is_ok() const</div><div class="ttdoc">has ok value?</div><div class="ttdef"><b>Definition:</b> Result.hpp:411</div></div>
<div class="ttc" id="classmitama_1_1Err_html"><div class="ttname"><a href="classmitama_1_1Err.html">mitama::Err</a></div><div class="ttdoc">Error stat generator class.</div><div class="ttdef"><b>Definition:</b> Result.hpp:296</div></div>
<div class="ttc" id="Result_8hpp_html_a871394f3df1fc83ab0daf932219314d7"><div class="ttname"><a href="Result_8hpp.html#a871394f3df1fc83ab0daf932219314d7">mitama::is_result_v</a></div><div class="ttdeci">constexpr bool is_result_v</div><div class="ttdoc">variable template for is_result&lt;T&gt;</div><div class="ttdef"><b>Definition:</b> Result.hpp:75</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_a75436d36664fbc02baf8ec5dbdd1346c"><div class="ttname"><a href="classmitama_1_1Ok.html#a75436d36664fbc02baf8ec5dbdd1346c">mitama::Ok::Ok</a></div><div class="ttdeci">Ok()=delete</div><div class="ttdoc">default constructor is explicitly deleted</div></div>
<div class="ttc" id="classmitama_1_1Result_html_ac1e47c8aba033a76f0f5683bd97efc6f"><div class="ttname"><a href="classmitama_1_1Result.html#ac1e47c8aba033a76f0f5683bd97efc6f">mitama::Result::Result</a></div><div class="ttdeci">Result(Err&lt; U &gt; const &amp;err)</div><div class="ttdoc">constructor for Err const&amp;</div><div class="ttdef"><b>Definition:</b> Result.hpp:643</div></div>
<div class="ttc" id="classmitama_1_1in__place__ok__t_html"><div class="ttname"><a href="classmitama_1_1in__place__ok__t.html">mitama::in_place_ok_t</a></div><div class="ttdoc">tag class for Result in-place constructor.</div><div class="ttdef"><b>Definition:</b> Result.hpp:503</div></div>
<div class="ttc" id="classmitama_1_1Err_html_a8116f989d56da2b15b355296512f3875"><div class="ttname"><a href="classmitama_1_1Err.html#a8116f989d56da2b15b355296512f3875">mitama::Err::is_err</a></div><div class="ttdeci">constexpr std::true_type is_err() const</div><div class="ttdoc">has err value?</div><div class="ttdef"><b>Definition:</b> Result.hpp:418</div></div>
<div class="ttc" id="classmitama_1_1Result_html_ac5136126583dff49a654afb1ed0fba05"><div class="ttname"><a href="classmitama_1_1Result.html#ac5136126583dff49a654afb1ed0fba05">mitama::Result::Result</a></div><div class="ttdeci">Result(Ok&lt; U &gt; &amp;&amp;ok)</div><div class="ttdoc">constructor for Ok&amp;&amp;</div><div class="ttdef"><b>Definition:</b> Result.hpp:615</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a6cfdb95916e61eb1b820313990d91e8d"><div class="ttname"><a href="classmitama_1_1Result.html#a6cfdb95916e61eb1b820313990d91e8d">mitama::Result::and_then</a></div><div class="ttdeci">constexpr auto and_then(O &amp;&amp;op) const &amp;-&gt; std::enable_if_t&lt; is_result_v&lt; std::invoke_result_t&lt; O, T &gt;&gt;, std::invoke_result_t&lt; O, T &gt;&gt;</div><div class="ttdoc">Calls op if the result is Ok, otherwise returns the Err value of self.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1017</div></div>
<div class="ttc" id="classmitama_1_1in__place__err__t_html"><div class="ttname"><a href="classmitama_1_1in__place__err__t.html">mitama::in_place_err_t</a></div><div class="ttdoc">tag class for Result in-place constructor.</div><div class="ttdef"><b>Definition:</b> Result.hpp:515</div></div>
<div class="ttc" id="classmitama_1_1Result_html_aeab33770153c67c98a2db599aff74896"><div class="ttname"><a href="classmitama_1_1Result.html#aeab33770153c67c98a2db599aff74896">mitama::Result::is_ok</a></div><div class="ttdeci">constexpr bool is_ok() const noexcept</div><div class="ttdoc">Returns true if the result is Ok.</div><div class="ttdef"><b>Definition:</b> Result.hpp:779</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a276134207694d2ef1f51ae19880f43a2"><div class="ttname"><a href="classmitama_1_1Result.html#a276134207694d2ef1f51ae19880f43a2">mitama::Result::Result</a></div><div class="ttdeci">constexpr Result() noexcept=delete</div><div class="ttdoc">Default constructor. This constructor is explicitly deleted. Empty Result is not allowed.</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_abe79382e921436cdde8213ed5d0ac20b"><div class="ttname"><a href="classmitama_1_1Ok.html#abe79382e921436cdde8213ed5d0ac20b">mitama::Ok::Ok</a></div><div class="ttdeci">Ok(U &amp;&amp;u) noexcept(std::is_nothrow_constructible_v&lt; T, U &gt;)</div><div class="ttdoc">explicit generic constructor template  Initializes the contained variant as if direct-non-list-initia...</div><div class="ttdef"><b>Definition:</b> Result.hpp:142</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_ae2998c7b9ed98d4b6dae7d32f8a1ede6"><div class="ttname"><a href="classmitama_1_1Ok.html#ae2998c7b9ed98d4b6dae7d32f8a1ede6">mitama::Ok::operator==</a></div><div class="ttdeci">bool operator==(Ok&lt; T_ &gt; const &amp;rhs) const</div><div class="ttdoc">operator== for Ok and Ok</div><div class="ttdef"><b>Definition:</b> Result.hpp:261</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a59edaa99e2fc00599a2f76433b399a6f"><div class="ttname"><a href="classmitama_1_1Result.html#a59edaa99e2fc00599a2f76433b399a6f">mitama::Result::ok</a></div><div class="ttdeci">constexpr std::optional&lt; T &gt; ok() const &amp;</div><div class="ttdoc">Converts from Result&lt;T, E&gt; to std::optional&lt;T&gt;.</div><div class="ttdef"><b>Definition:</b> Result.hpp:811</div></div>
<div class="ttc" id="classmitama_1_1Result_html_a13e93b48e2105f8def32e1eca7d9291e"><div class="ttname"><a href="classmitama_1_1Result.html#a13e93b48e2105f8def32e1eca7d9291e">mitama::Result::unwrap_err</a></div><div class="ttdeci">E unwrap_err() const</div><div class="ttdoc">Unwraps a result, yielding the content of an Err.</div><div class="ttdef"><b>Definition:</b> Result.hpp:1215</div></div>
<div class="ttc" id="structmitama_1_1is__err__type_html"><div class="ttname"><a href="structmitama_1_1is__err__type.html">mitama::is_err_type</a></div><div class="ttdoc">meta-function that detect type is mitama::Err</div><div class="ttdef"><b>Definition:</b> Result.hpp:81</div></div>
<div class="ttc" id="classmitama_1_1Ok_html_aa13266203c15ddfc2ae5b899f2175206"><div class="ttname"><a href="classmitama_1_1Ok.html#aa13266203c15ddfc2ae5b899f2175206">mitama::Ok::is_ok</a></div><div class="ttdeci">constexpr std::true_type is_ok() const noexcept</div><div class="ttdoc">has ok value?</div><div class="ttdef"><b>Definition:</b> Result.hpp:202</div></div>
<div class="ttc" id="classmitama_1_1Result_html"><div class="ttname"><a href="classmitama_1_1Result.html">mitama::Result</a></div><div class="ttdoc">data Result = Ok | Err</div><div class="ttdef"><b>Definition:</b> Result.hpp:530</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.15
</small></address>
</body>
</html>
